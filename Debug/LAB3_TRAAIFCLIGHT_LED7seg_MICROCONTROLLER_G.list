
LAB3_TRAAIFCLIGHT_LED7seg_MICROCONTROLLER_G.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002898  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080029a4  080029a4  000129a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029c4  080029c4  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  080029c4  080029c4  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029c4  080029c4  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029c4  080029c4  000129c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029c8  080029c8  000129c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080029cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000002c  080029f8  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  080029f8  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000939d  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bda  00000000  00000000  000293f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002afd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002ba48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d18  00000000  00000000  0002c3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9eb  00000000  00000000  000430b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008235a  00000000  00000000  0004eaa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0dfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028e8  00000000  00000000  000d0e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800298c 	.word	0x0800298c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	0800298c 	.word	0x0800298c

0800014c <isButton1Pressed>:
int KeyReg3 = NORMAL_STATE;

int TimeOutForKeyPress =  200;   // nhan de trong 2 giay thi se chuyen
int button1_flag = 0;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000048 	.word	0x20000048

08000170 <subKeyProcess>:

void subKeyProcess(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//TODO
	//HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
	button1_flag = 1;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <subKeyProcess+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	20000048 	.word	0x20000048

08000188 <getKeyInput>:

void getKeyInput(){
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  KeyReg2 = KeyReg1;
 800018c:	4b1f      	ldr	r3, [pc, #124]	; (800020c <getKeyInput+0x84>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a1f      	ldr	r2, [pc, #124]	; (8000210 <getKeyInput+0x88>)
 8000192:	6013      	str	r3, [r2, #0]
  KeyReg1 = KeyReg0;
 8000194:	4b1f      	ldr	r3, [pc, #124]	; (8000214 <getKeyInput+0x8c>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a1c      	ldr	r2, [pc, #112]	; (800020c <getKeyInput+0x84>)
 800019a:	6013      	str	r3, [r2, #0]
  KeyReg0 = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 800019c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a0:	481d      	ldr	r0, [pc, #116]	; (8000218 <getKeyInput+0x90>)
 80001a2:	f001 fbcb 	bl	800193c <HAL_GPIO_ReadPin>
 80001a6:	4603      	mov	r3, r0
 80001a8:	461a      	mov	r2, r3
 80001aa:	4b1a      	ldr	r3, [pc, #104]	; (8000214 <getKeyInput+0x8c>)
 80001ac:	601a      	str	r2, [r3, #0]
  if ((KeyReg1 == KeyReg0) && (KeyReg1 == KeyReg2)){
 80001ae:	4b17      	ldr	r3, [pc, #92]	; (800020c <getKeyInput+0x84>)
 80001b0:	681a      	ldr	r2, [r3, #0]
 80001b2:	4b18      	ldr	r3, [pc, #96]	; (8000214 <getKeyInput+0x8c>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	429a      	cmp	r2, r3
 80001b8:	d125      	bne.n	8000206 <getKeyInput+0x7e>
 80001ba:	4b14      	ldr	r3, [pc, #80]	; (800020c <getKeyInput+0x84>)
 80001bc:	681a      	ldr	r2, [r3, #0]
 80001be:	4b14      	ldr	r3, [pc, #80]	; (8000210 <getKeyInput+0x88>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	d11f      	bne.n	8000206 <getKeyInput+0x7e>
    if (KeyReg2 != KeyReg3){
 80001c6:	4b12      	ldr	r3, [pc, #72]	; (8000210 <getKeyInput+0x88>)
 80001c8:	681a      	ldr	r2, [r3, #0]
 80001ca:	4b14      	ldr	r3, [pc, #80]	; (800021c <getKeyInput+0x94>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	429a      	cmp	r2, r3
 80001d0:	d00d      	beq.n	80001ee <getKeyInput+0x66>
      KeyReg3 = KeyReg2;
 80001d2:	4b0f      	ldr	r3, [pc, #60]	; (8000210 <getKeyInput+0x88>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	4a11      	ldr	r2, [pc, #68]	; (800021c <getKeyInput+0x94>)
 80001d8:	6013      	str	r3, [r2, #0]

      if (KeyReg3 == PRESSED_STATE){
 80001da:	4b10      	ldr	r3, [pc, #64]	; (800021c <getKeyInput+0x94>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d111      	bne.n	8000206 <getKeyInput+0x7e>
        TimeOutForKeyPress = 200;
 80001e2:	4b0f      	ldr	r3, [pc, #60]	; (8000220 <getKeyInput+0x98>)
 80001e4:	22c8      	movs	r2, #200	; 0xc8
 80001e6:	601a      	str	r2, [r3, #0]
        subKeyProcess();
 80001e8:	f7ff ffc2 	bl	8000170 <subKeyProcess>
        if (TimeOutForKeyPress == 0){
          KeyReg3 = NORMAL_STATE;
        }
    }
  }
}
 80001ec:	e00b      	b.n	8000206 <getKeyInput+0x7e>
       TimeOutForKeyPress --;
 80001ee:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <getKeyInput+0x98>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	4a0a      	ldr	r2, [pc, #40]	; (8000220 <getKeyInput+0x98>)
 80001f6:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 80001f8:	4b09      	ldr	r3, [pc, #36]	; (8000220 <getKeyInput+0x98>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d102      	bne.n	8000206 <getKeyInput+0x7e>
          KeyReg3 = NORMAL_STATE;
 8000200:	4b06      	ldr	r3, [pc, #24]	; (800021c <getKeyInput+0x94>)
 8000202:	2201      	movs	r2, #1
 8000204:	601a      	str	r2, [r3, #0]
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20000004 	.word	0x20000004
 8000210:	20000008 	.word	0x20000008
 8000214:	20000000 	.word	0x20000000
 8000218:	40011000 	.word	0x40011000
 800021c:	2000000c 	.word	0x2000000c
 8000220:	20000010 	.word	0x20000010

08000224 <fsm_automatic_run>:

#include "fsm_automatic.h"



void fsm_automatic_run(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0




	switch(status){
 8000228:	4b3f      	ldr	r3, [pc, #252]	; (8000328 <fsm_automatic_run+0x104>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	3b01      	subs	r3, #1
 800022e:	2b03      	cmp	r3, #3
 8000230:	d870      	bhi.n	8000314 <fsm_automatic_run+0xf0>
 8000232:	a201      	add	r2, pc, #4	; (adr r2, 8000238 <fsm_automatic_run+0x14>)
 8000234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000238:	08000249 	.word	0x08000249
 800023c:	0800027b 	.word	0x0800027b
 8000240:	080002af 	.word	0x080002af
 8000244:	080002e1 	.word	0x080002e1

	case INIT:
		HAL_GPIO_WritePin(LED_RED_GPIO_Port , LED_RED_Pin       ,SET) ;
 8000248:	2201      	movs	r2, #1
 800024a:	2120      	movs	r1, #32
 800024c:	4837      	ldr	r0, [pc, #220]	; (800032c <fsm_automatic_run+0x108>)
 800024e:	f001 fb8c 	bl	800196a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port , LED_GREEN_Pin   ,SET) ;
 8000252:	2201      	movs	r2, #1
 8000254:	2180      	movs	r1, #128	; 0x80
 8000256:	4835      	ldr	r0, [pc, #212]	; (800032c <fsm_automatic_run+0x108>)
 8000258:	f001 fb87 	bl	800196a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port , LED_YELLOW_Pin ,SET) ;
 800025c:	2201      	movs	r2, #1
 800025e:	2140      	movs	r1, #64	; 0x40
 8000260:	4832      	ldr	r0, [pc, #200]	; (800032c <fsm_automatic_run+0x108>)
 8000262:	f001 fb82 	bl	800196a <HAL_GPIO_WritePin>

		status = AUTO_RED  ;
 8000266:	4b30      	ldr	r3, [pc, #192]	; (8000328 <fsm_automatic_run+0x104>)
 8000268:	2202      	movs	r2, #2
 800026a:	601a      	str	r2, [r3, #0]
		setTimer1(600) ;
 800026c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000270:	f000 fe82 	bl	8000f78 <setTimer1>
		isButton1Pressed() ;
 8000274:	f7ff ff6a 	bl	800014c <isButton1Pressed>
		break ;
 8000278:	e053      	b.n	8000322 <fsm_automatic_run+0xfe>

	case AUTO_RED:
		/* todo  */
        setTrafficLight() ;
 800027a:	f000 ffc3 	bl	8001204 <setTrafficLight>

		if(timer1_flag == 1){
 800027e:	4b2c      	ldr	r3, [pc, #176]	; (8000330 <fsm_automatic_run+0x10c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	2b01      	cmp	r3, #1
 8000284:	d106      	bne.n	8000294 <fsm_automatic_run+0x70>
			status = AUTO_GREEN ;
 8000286:	4b28      	ldr	r3, [pc, #160]	; (8000328 <fsm_automatic_run+0x104>)
 8000288:	2203      	movs	r2, #3
 800028a:	601a      	str	r2, [r3, #0]
			setTimer1(300) ;
 800028c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000290:	f000 fe72 	bl	8000f78 <setTimer1>

		}

		if(isButton1Pressed() == 1){
 8000294:	f7ff ff5a 	bl	800014c <isButton1Pressed>
 8000298:	4603      	mov	r3, r0
 800029a:	2b01      	cmp	r3, #1
 800029c:	d13c      	bne.n	8000318 <fsm_automatic_run+0xf4>
			status = MAN_RED ;
 800029e:	4b22      	ldr	r3, [pc, #136]	; (8000328 <fsm_automatic_run+0x104>)
 80002a0:	220c      	movs	r2, #12
 80002a2:	601a      	str	r2, [r3, #0]
			setTimer1(1000) ;
 80002a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002a8:	f000 fe66 	bl	8000f78 <setTimer1>
		}

		break ;
 80002ac:	e034      	b.n	8000318 <fsm_automatic_run+0xf4>

	case AUTO_GREEN:
		setTrafficLight() ;
 80002ae:	f000 ffa9 	bl	8001204 <setTrafficLight>

		if(timer1_flag == 1){
 80002b2:	4b1f      	ldr	r3, [pc, #124]	; (8000330 <fsm_automatic_run+0x10c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d105      	bne.n	80002c6 <fsm_automatic_run+0xa2>
			status = AUTO_YELLOW ;
 80002ba:	4b1b      	ldr	r3, [pc, #108]	; (8000328 <fsm_automatic_run+0x104>)
 80002bc:	2204      	movs	r2, #4
 80002be:	601a      	str	r2, [r3, #0]
			setTimer1(200)       ;
 80002c0:	20c8      	movs	r0, #200	; 0xc8
 80002c2:	f000 fe59 	bl	8000f78 <setTimer1>

		}

		if(isButton1Pressed() == 1){
 80002c6:	f7ff ff41 	bl	800014c <isButton1Pressed>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d125      	bne.n	800031c <fsm_automatic_run+0xf8>
			status = MAN_GREEN ;
 80002d0:	4b15      	ldr	r3, [pc, #84]	; (8000328 <fsm_automatic_run+0x104>)
 80002d2:	220e      	movs	r2, #14
 80002d4:	601a      	str	r2, [r3, #0]
			setTimer1(1000)    ;
 80002d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002da:	f000 fe4d 	bl	8000f78 <setTimer1>

		}
		break ;
 80002de:	e01d      	b.n	800031c <fsm_automatic_run+0xf8>

	case AUTO_YELLOW:
		setTrafficLight() ;
 80002e0:	f000 ff90 	bl	8001204 <setTrafficLight>

		if(timer1_flag == 1){
 80002e4:	4b12      	ldr	r3, [pc, #72]	; (8000330 <fsm_automatic_run+0x10c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d106      	bne.n	80002fa <fsm_automatic_run+0xd6>
			status = AUTO_RED ;
 80002ec:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <fsm_automatic_run+0x104>)
 80002ee:	2202      	movs	r2, #2
 80002f0:	601a      	str	r2, [r3, #0]
			setTimer1(500) ;
 80002f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002f6:	f000 fe3f 	bl	8000f78 <setTimer1>

		}

		if(isButton1Pressed() == 1){
 80002fa:	f7ff ff27 	bl	800014c <isButton1Pressed>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b01      	cmp	r3, #1
 8000302:	d10d      	bne.n	8000320 <fsm_automatic_run+0xfc>
			status = MAN_YELLOW  ;
 8000304:	4b08      	ldr	r3, [pc, #32]	; (8000328 <fsm_automatic_run+0x104>)
 8000306:	220d      	movs	r2, #13
 8000308:	601a      	str	r2, [r3, #0]
			setTimer1(1000)      ;
 800030a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800030e:	f000 fe33 	bl	8000f78 <setTimer1>
		}
		break ;
 8000312:	e005      	b.n	8000320 <fsm_automatic_run+0xfc>

	default:
		break ;
 8000314:	bf00      	nop
 8000316:	e004      	b.n	8000322 <fsm_automatic_run+0xfe>
		break ;
 8000318:	bf00      	nop
 800031a:	e002      	b.n	8000322 <fsm_automatic_run+0xfe>
		break ;
 800031c:	bf00      	nop
 800031e:	e000      	b.n	8000322 <fsm_automatic_run+0xfe>
		break ;
 8000320:	bf00      	nop
	}
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	2000004c 	.word	0x2000004c
 800032c:	40010800 	.word	0x40010800
 8000330:	20000054 	.word	0x20000054

08000334 <fsm_manual_run>:
 *  Created on: Nov 2, 2022
 *      Author: Khanh Ton
 */
#include "fsm_manual.h"

void fsm_manual_run(){
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

	switch(status){
 8000338:	4b30      	ldr	r3, [pc, #192]	; (80003fc <fsm_manual_run+0xc8>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b0e      	cmp	r3, #14
 800033e:	d020      	beq.n	8000382 <fsm_manual_run+0x4e>
 8000340:	2b0e      	cmp	r3, #14
 8000342:	dc51      	bgt.n	80003e8 <fsm_manual_run+0xb4>
 8000344:	2b0c      	cmp	r3, #12
 8000346:	d002      	beq.n	800034e <fsm_manual_run+0x1a>
 8000348:	2b0d      	cmp	r3, #13
 800034a:	d034      	beq.n	80003b6 <fsm_manual_run+0x82>
			setTimer1(1000)  ;
 		}
		break ;

	default:
		break ;
 800034c:	e04c      	b.n	80003e8 <fsm_manual_run+0xb4>
		setTrafficLight()     ;
 800034e:	f000 ff59 	bl	8001204 <setTrafficLight>
		if(timer1_flag == 1){
 8000352:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <fsm_manual_run+0xcc>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b01      	cmp	r3, #1
 8000358:	d106      	bne.n	8000368 <fsm_manual_run+0x34>
			status = AUTO_RED ;
 800035a:	4b28      	ldr	r3, [pc, #160]	; (80003fc <fsm_manual_run+0xc8>)
 800035c:	2202      	movs	r2, #2
 800035e:	601a      	str	r2, [r3, #0]
			setTimer1(500)    ;
 8000360:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000364:	f000 fe08 	bl	8000f78 <setTimer1>
	    if(isButton1Pressed() == 1){
 8000368:	f7ff fef0 	bl	800014c <isButton1Pressed>
 800036c:	4603      	mov	r3, r0
 800036e:	2b01      	cmp	r3, #1
 8000370:	d13c      	bne.n	80003ec <fsm_manual_run+0xb8>
	        	status = MAN_GREEN;
 8000372:	4b22      	ldr	r3, [pc, #136]	; (80003fc <fsm_manual_run+0xc8>)
 8000374:	220e      	movs	r2, #14
 8000376:	601a      	str	r2, [r3, #0]
	        	setTimer1(1000) ;
 8000378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800037c:	f000 fdfc 	bl	8000f78 <setTimer1>
		break ;
 8000380:	e034      	b.n	80003ec <fsm_manual_run+0xb8>
		setTrafficLight()  ;
 8000382:	f000 ff3f 	bl	8001204 <setTrafficLight>
        if(timer1_flag == 1){
 8000386:	4b1e      	ldr	r3, [pc, #120]	; (8000400 <fsm_manual_run+0xcc>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	2b01      	cmp	r3, #1
 800038c:	d106      	bne.n	800039c <fsm_manual_run+0x68>
        	status = AUTO_GREEN ;
 800038e:	4b1b      	ldr	r3, [pc, #108]	; (80003fc <fsm_manual_run+0xc8>)
 8000390:	2203      	movs	r2, #3
 8000392:	601a      	str	r2, [r3, #0]
        	setTimer1(300)      ;
 8000394:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000398:	f000 fdee 	bl	8000f78 <setTimer1>
        if(isButton1Pressed() == 1){
 800039c:	f7ff fed6 	bl	800014c <isButton1Pressed>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d124      	bne.n	80003f0 <fsm_manual_run+0xbc>
        	status = MAN_YELLOW ;
 80003a6:	4b15      	ldr	r3, [pc, #84]	; (80003fc <fsm_manual_run+0xc8>)
 80003a8:	220d      	movs	r2, #13
 80003aa:	601a      	str	r2, [r3, #0]
        	setTimer1(1000) ;
 80003ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b0:	f000 fde2 	bl	8000f78 <setTimer1>
        break ;
 80003b4:	e01c      	b.n	80003f0 <fsm_manual_run+0xbc>
		setTrafficLight()  ;
 80003b6:	f000 ff25 	bl	8001204 <setTrafficLight>
		if(timer1_flag == 1){
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <fsm_manual_run+0xcc>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d105      	bne.n	80003ce <fsm_manual_run+0x9a>
			status = AUTO_YELLOW ;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <fsm_manual_run+0xc8>)
 80003c4:	2204      	movs	r2, #4
 80003c6:	601a      	str	r2, [r3, #0]
			setTimer1(200) ;
 80003c8:	20c8      	movs	r0, #200	; 0xc8
 80003ca:	f000 fdd5 	bl	8000f78 <setTimer1>
		if(isButton1Pressed() == 1 ){
 80003ce:	f7ff febd 	bl	800014c <isButton1Pressed>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d10d      	bne.n	80003f4 <fsm_manual_run+0xc0>
			status = MAN_RED ;
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <fsm_manual_run+0xc8>)
 80003da:	220c      	movs	r2, #12
 80003dc:	601a      	str	r2, [r3, #0]
			setTimer1(1000)  ;
 80003de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003e2:	f000 fdc9 	bl	8000f78 <setTimer1>
		break ;
 80003e6:	e005      	b.n	80003f4 <fsm_manual_run+0xc0>
		break ;
 80003e8:	bf00      	nop
 80003ea:	e004      	b.n	80003f6 <fsm_manual_run+0xc2>
		break ;
 80003ec:	bf00      	nop
 80003ee:	e002      	b.n	80003f6 <fsm_manual_run+0xc2>
        break ;
 80003f0:	bf00      	nop
 80003f2:	e000      	b.n	80003f6 <fsm_manual_run+0xc2>
		break ;
 80003f4:	bf00      	nop

	}


}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	2000004c 	.word	0x2000004c
 8000400:	20000054 	.word	0x20000054

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040a:	f000 ffad 	bl	8001368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800040e:	f000 fcb5 	bl	8000d7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000412:	f000 fd3b 	bl	8000e8c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000416:	f000 fced 	bl	8000df4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  HAL_GPIO_WritePin(LED_RED_GPIO_Port , LED_RED_Pin , RESET)  ;
 800041a:	2200      	movs	r2, #0
 800041c:	2120      	movs	r1, #32
 800041e:	4854      	ldr	r0, [pc, #336]	; (8000570 <main+0x16c>)
 8000420:	f001 faa3 	bl	800196a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port ,  LED_GREEN_Pin , SET)             ;
 8000424:	2201      	movs	r2, #1
 8000426:	2180      	movs	r1, #128	; 0x80
 8000428:	4851      	ldr	r0, [pc, #324]	; (8000570 <main+0x16c>)
 800042a:	f001 fa9e 	bl	800196a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port , LED_YELLOW_Pin, SET)             ;
 800042e:	2201      	movs	r2, #1
 8000430:	2140      	movs	r1, #64	; 0x40
 8000432:	484f      	ldr	r0, [pc, #316]	; (8000570 <main+0x16c>)
 8000434:	f001 fa99 	bl	800196a <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(RED_GPIO_Port , RED_Pin , SET)  ;
 8000438:	2201      	movs	r2, #1
 800043a:	2102      	movs	r1, #2
 800043c:	484c      	ldr	r0, [pc, #304]	; (8000570 <main+0x16c>)
 800043e:	f001 fa94 	bl	800196a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GREEN_GPIO_Port ,  GREEN_Pin , RESET)             ;
 8000442:	2200      	movs	r2, #0
 8000444:	2108      	movs	r1, #8
 8000446:	484a      	ldr	r0, [pc, #296]	; (8000570 <main+0x16c>)
 8000448:	f001 fa8f 	bl	800196a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(YELLOW_GPIO_Port , YELLOW_Pin, SET)             ;
 800044c:	2201      	movs	r2, #1
 800044e:	2104      	movs	r1, #4
 8000450:	4847      	ldr	r0, [pc, #284]	; (8000570 <main+0x16c>)
 8000452:	f001 fa8a 	bl	800196a <HAL_GPIO_WritePin>


    HAL_GPIO_WritePin(SEG00_GPIO_Port , SEG00_Pin , RESET )         ;
 8000456:	2200      	movs	r2, #0
 8000458:	f44f 7100 	mov.w	r1, #512	; 0x200
 800045c:	4845      	ldr	r0, [pc, #276]	; (8000574 <main+0x170>)
 800045e:	f001 fa84 	bl	800196a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG01_GPIO_Port , SEG01_Pin , RESET )         ;
 8000462:	2200      	movs	r2, #0
 8000464:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000468:	4842      	ldr	r0, [pc, #264]	; (8000574 <main+0x170>)
 800046a:	f001 fa7e 	bl	800196a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG02_GPIO_Port , SEG02_Pin , RESET )         ;
 800046e:	2200      	movs	r2, #0
 8000470:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000474:	483f      	ldr	r0, [pc, #252]	; (8000574 <main+0x170>)
 8000476:	f001 fa78 	bl	800196a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG03_GPIO_Port , SEG03_Pin , RESET )         ;
 800047a:	2200      	movs	r2, #0
 800047c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000480:	483c      	ldr	r0, [pc, #240]	; (8000574 <main+0x170>)
 8000482:	f001 fa72 	bl	800196a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG04_GPIO_Port , SEG04_Pin , RESET )         ;
 8000486:	2200      	movs	r2, #0
 8000488:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800048c:	4839      	ldr	r0, [pc, #228]	; (8000574 <main+0x170>)
 800048e:	f001 fa6c 	bl	800196a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG05_GPIO_Port , SEG05_Pin , RESET )         ;
 8000492:	2200      	movs	r2, #0
 8000494:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000498:	4836      	ldr	r0, [pc, #216]	; (8000574 <main+0x170>)
 800049a:	f001 fa66 	bl	800196a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEG06_GPIO_Port , SEG06_Pin , RESET )         ;
 800049e:	2200      	movs	r2, #0
 80004a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004a4:	4833      	ldr	r0, [pc, #204]	; (8000574 <main+0x170>)
 80004a6:	f001 fa60 	bl	800196a <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(SEG0_GPIO_Port , SEG0_Pin , RESET )         ;
 80004aa:	2200      	movs	r2, #0
 80004ac:	2101      	movs	r1, #1
 80004ae:	4831      	ldr	r0, [pc, #196]	; (8000574 <main+0x170>)
 80004b0:	f001 fa5b 	bl	800196a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG1_GPIO_Port , SEG1_Pin , RESET )         ;
 80004b4:	2200      	movs	r2, #0
 80004b6:	2102      	movs	r1, #2
 80004b8:	482e      	ldr	r0, [pc, #184]	; (8000574 <main+0x170>)
 80004ba:	f001 fa56 	bl	800196a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG2_GPIO_Port , SEG2_Pin , RESET )         ;
 80004be:	2200      	movs	r2, #0
 80004c0:	2104      	movs	r1, #4
 80004c2:	482c      	ldr	r0, [pc, #176]	; (8000574 <main+0x170>)
 80004c4:	f001 fa51 	bl	800196a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG3_GPIO_Port , SEG3_Pin , RESET )         ;
 80004c8:	2200      	movs	r2, #0
 80004ca:	2108      	movs	r1, #8
 80004cc:	4829      	ldr	r0, [pc, #164]	; (8000574 <main+0x170>)
 80004ce:	f001 fa4c 	bl	800196a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG4_GPIO_Port , SEG4_Pin , RESET )         ;
 80004d2:	2200      	movs	r2, #0
 80004d4:	2110      	movs	r1, #16
 80004d6:	4827      	ldr	r0, [pc, #156]	; (8000574 <main+0x170>)
 80004d8:	f001 fa47 	bl	800196a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG5_GPIO_Port , SEG5_Pin , RESET )         ;
 80004dc:	2200      	movs	r2, #0
 80004de:	2120      	movs	r1, #32
 80004e0:	4824      	ldr	r0, [pc, #144]	; (8000574 <main+0x170>)
 80004e2:	f001 fa42 	bl	800196a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG6_Pin , RESET )         ;
 80004e6:	2200      	movs	r2, #0
 80004e8:	2140      	movs	r1, #64	; 0x40
 80004ea:	4822      	ldr	r0, [pc, #136]	; (8000574 <main+0x170>)
 80004ec:	f001 fa3d 	bl	800196a <HAL_GPIO_WritePin>


  /* Infinite loop */
  HAL_TIM_Base_Start_IT(&htim2) ;
 80004f0:	4821      	ldr	r0, [pc, #132]	; (8000578 <main+0x174>)
 80004f2:	f001 fe8b 	bl	800220c <HAL_TIM_Base_Start_IT>
    void update7SEG(int index) ;
    void updateClockBuffer() ;
    void display7SEG(int count) ;
    void displaysecond7SEG(int count) ;

  status = INIT ;
 80004f6:	4b21      	ldr	r3, [pc, #132]	; (800057c <main+0x178>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	601a      	str	r2, [r3, #0]


  int counter_led = 5 ;
 80004fc:	2305      	movs	r3, #5
 80004fe:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN WHILE */
  int traffic_counter = 5 ;
 8000500:	2305      	movs	r3, #5
 8000502:	603b      	str	r3, [r7, #0]
  setTimer2(100) ;
 8000504:	2064      	movs	r0, #100	; 0x64
 8000506:	f000 fd4b 	bl	8000fa0 <setTimer2>
  setTimer3(100) ;
 800050a:	2064      	movs	r0, #100	; 0x64
 800050c:	f000 fd90 	bl	8001030 <setTimer3>
  setTimer4(100);
 8000510:	2064      	movs	r0, #100	; 0x64
 8000512:	f000 fdbb 	bl	800108c <setTimer4>
  while (1)
  {
    /* USER CODE END WHILE */

	  fsm_automatic_run() ;
 8000516:	f7ff fe85 	bl	8000224 <fsm_automatic_run>
	  fsm_manual_run()    ;
 800051a:	f7ff ff0b 	bl	8000334 <fsm_manual_run>
	  //if((counter_led2 == 3)&&(traffic_mode2 ==1)){HAL_GPIO_WritePin(GREEN_GPIO_Port , GREEN_Pin , RESET) ;}



            //DISPLAY FIRST 7SEG
            if(timer2_flag == 1){
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <main+0x17c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d121      	bne.n	800056a <main+0x166>
            traffic_counter = counter_led ; display7SEG(traffic_counter) ; setTimer2(100) ; counter_led-- ;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	6838      	ldr	r0, [r7, #0]
 800052c:	f000 fa02 	bl	8000934 <display7SEG>
 8000530:	2064      	movs	r0, #100	; 0x64
 8000532:	f000 fd35 	bl	8000fa0 <setTimer2>
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	3b01      	subs	r3, #1
 800053a:	607b      	str	r3, [r7, #4]
	        if(counter_led <= 0){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b00      	cmp	r3, #0
 8000540:	dc13      	bgt.n	800056a <main+0x166>
	    	switch(status){
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <main+0x178>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b04      	cmp	r3, #4
 8000548:	d00c      	beq.n	8000564 <main+0x160>
 800054a:	2b04      	cmp	r3, #4
 800054c:	dce3      	bgt.n	8000516 <main+0x112>
 800054e:	2b02      	cmp	r3, #2
 8000550:	d002      	beq.n	8000558 <main+0x154>
 8000552:	2b03      	cmp	r3, #3
 8000554:	d003      	beq.n	800055e <main+0x15a>
 8000556:	e009      	b.n	800056c <main+0x168>
	    	case AUTO_RED: counter_led = 3 ; break ;
 8000558:	2303      	movs	r3, #3
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	e006      	b.n	800056c <main+0x168>
	    	case AUTO_GREEN: counter_led = 2 ; break ;
 800055e:	2302      	movs	r3, #2
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	e003      	b.n	800056c <main+0x168>
	    	case AUTO_YELLOW: counter_led = 5 ;; break ;
 8000564:	2305      	movs	r3, #5
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	e000      	b.n	800056c <main+0x168>
	    	            }
	                          }
 800056a:	bf00      	nop
	  fsm_automatic_run() ;
 800056c:	e7d3      	b.n	8000516 <main+0x112>
 800056e:	bf00      	nop
 8000570:	40010800 	.word	0x40010800
 8000574:	40010c00 	.word	0x40010c00
 8000578:	20000070 	.word	0x20000070
 800057c:	2000004c 	.word	0x2000004c
 8000580:	2000005c 	.word	0x2000005c

08000584 <displaysecond7SEG>:
  * @retval None
  *
  *
  */

void displaysecond7SEG(int count){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2b09      	cmp	r3, #9
 8000590:	f200 81c9 	bhi.w	8000926 <displaysecond7SEG+0x3a2>
 8000594:	a201      	add	r2, pc, #4	; (adr r2, 800059c <displaysecond7SEG+0x18>)
 8000596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059a:	bf00      	nop
 800059c:	080005c5 	.word	0x080005c5
 80005a0:	0800061b 	.word	0x0800061b
 80005a4:	08000671 	.word	0x08000671
 80005a8:	080006c7 	.word	0x080006c7
 80005ac:	0800071d 	.word	0x0800071d
 80005b0:	08000773 	.word	0x08000773
 80005b4:	080007c9 	.word	0x080007c9
 80005b8:	0800081f 	.word	0x0800081f
 80005bc:	08000875 	.word	0x08000875
 80005c0:	080008d1 	.word	0x080008d1

	switch(count){

	 	    case 0:
	 	 			HAL_GPIO_WritePin(SEG0_GPIO_Port , SEG00_Pin , RESET) ;
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ca:	48c0      	ldr	r0, [pc, #768]	; (80008cc <displaysecond7SEG+0x348>)
 80005cc:	f001 f9cd 	bl	800196a <HAL_GPIO_WritePin>
	 	 	        HAL_GPIO_WritePin(SEG1_GPIO_Port , SEG01_Pin , RESET) ;
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d6:	48bd      	ldr	r0, [pc, #756]	; (80008cc <displaysecond7SEG+0x348>)
 80005d8:	f001 f9c7 	bl	800196a <HAL_GPIO_WritePin>
	 	 			HAL_GPIO_WritePin(SEG2_GPIO_Port , SEG02_Pin , RESET) ;
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005e2:	48ba      	ldr	r0, [pc, #744]	; (80008cc <displaysecond7SEG+0x348>)
 80005e4:	f001 f9c1 	bl	800196a <HAL_GPIO_WritePin>
	 	 			HAL_GPIO_WritePin(SEG3_GPIO_Port , SEG03_Pin , RESET) ;
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ee:	48b7      	ldr	r0, [pc, #732]	; (80008cc <displaysecond7SEG+0x348>)
 80005f0:	f001 f9bb 	bl	800196a <HAL_GPIO_WritePin>
	 	 		    HAL_GPIO_WritePin(SEG4_GPIO_Port , SEG04_Pin , RESET) ;
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fa:	48b4      	ldr	r0, [pc, #720]	; (80008cc <displaysecond7SEG+0x348>)
 80005fc:	f001 f9b5 	bl	800196a <HAL_GPIO_WritePin>
	 	 	        HAL_GPIO_WritePin(SEG5_GPIO_Port , SEG05_Pin , RESET) ;
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000606:	48b1      	ldr	r0, [pc, #708]	; (80008cc <displaysecond7SEG+0x348>)
 8000608:	f001 f9af 	bl	800196a <HAL_GPIO_WritePin>
	 	 		    HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG06_Pin , SET) ;
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000612:	48ae      	ldr	r0, [pc, #696]	; (80008cc <displaysecond7SEG+0x348>)
 8000614:	f001 f9a9 	bl	800196a <HAL_GPIO_WritePin>
	 	 			break ;
 8000618:	e185      	b.n	8000926 <displaysecond7SEG+0x3a2>

	 		case 1:


	 			 HAL_GPIO_WritePin(SEG0_GPIO_Port , SEG00_Pin , SET) ;
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000620:	48aa      	ldr	r0, [pc, #680]	; (80008cc <displaysecond7SEG+0x348>)
 8000622:	f001 f9a2 	bl	800196a <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG1_GPIO_Port , SEG01_Pin , RESET) ;
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800062c:	48a7      	ldr	r0, [pc, #668]	; (80008cc <displaysecond7SEG+0x348>)
 800062e:	f001 f99c 	bl	800196a <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG2_GPIO_Port , SEG02_Pin , RESET) ;
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000638:	48a4      	ldr	r0, [pc, #656]	; (80008cc <displaysecond7SEG+0x348>)
 800063a:	f001 f996 	bl	800196a <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG3_GPIO_Port , SEG03_Pin , SET) ;
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000644:	48a1      	ldr	r0, [pc, #644]	; (80008cc <displaysecond7SEG+0x348>)
 8000646:	f001 f990 	bl	800196a <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG4_GPIO_Port , SEG04_Pin , SET) ;
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000650:	489e      	ldr	r0, [pc, #632]	; (80008cc <displaysecond7SEG+0x348>)
 8000652:	f001 f98a 	bl	800196a <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG5_GPIO_Port , SEG05_Pin , SET) ;
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065c:	489b      	ldr	r0, [pc, #620]	; (80008cc <displaysecond7SEG+0x348>)
 800065e:	f001 f984 	bl	800196a <HAL_GPIO_WritePin>
	 			 HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG06_Pin , SET) ;
 8000662:	2201      	movs	r2, #1
 8000664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000668:	4898      	ldr	r0, [pc, #608]	; (80008cc <displaysecond7SEG+0x348>)
 800066a:	f001 f97e 	bl	800196a <HAL_GPIO_WritePin>
	 			 break ;
 800066e:	e15a      	b.n	8000926 <displaysecond7SEG+0x3a2>

	 		case 2:

	 			HAL_GPIO_WritePin(SEG0_GPIO_Port , SEG00_Pin , RESET) ;
 8000670:	2200      	movs	r2, #0
 8000672:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000676:	4895      	ldr	r0, [pc, #596]	; (80008cc <displaysecond7SEG+0x348>)
 8000678:	f001 f977 	bl	800196a <HAL_GPIO_WritePin>
	 	        HAL_GPIO_WritePin(SEG1_GPIO_Port , SEG01_Pin , RESET) ;
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000682:	4892      	ldr	r0, [pc, #584]	; (80008cc <displaysecond7SEG+0x348>)
 8000684:	f001 f971 	bl	800196a <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG2_GPIO_Port , SEG02_Pin , SET) ;
 8000688:	2201      	movs	r2, #1
 800068a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800068e:	488f      	ldr	r0, [pc, #572]	; (80008cc <displaysecond7SEG+0x348>)
 8000690:	f001 f96b 	bl	800196a <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG3_GPIO_Port , SEG03_Pin , RESET) ;
 8000694:	2200      	movs	r2, #0
 8000696:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069a:	488c      	ldr	r0, [pc, #560]	; (80008cc <displaysecond7SEG+0x348>)
 800069c:	f001 f965 	bl	800196a <HAL_GPIO_WritePin>
	 		    HAL_GPIO_WritePin(SEG4_GPIO_Port , SEG04_Pin , RESET) ;
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a6:	4889      	ldr	r0, [pc, #548]	; (80008cc <displaysecond7SEG+0x348>)
 80006a8:	f001 f95f 	bl	800196a <HAL_GPIO_WritePin>
	 	        HAL_GPIO_WritePin(SEG5_GPIO_Port , SEG05_Pin , SET) ;
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b2:	4886      	ldr	r0, [pc, #536]	; (80008cc <displaysecond7SEG+0x348>)
 80006b4:	f001 f959 	bl	800196a <HAL_GPIO_WritePin>
	 		    HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG06_Pin , RESET) ;
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006be:	4883      	ldr	r0, [pc, #524]	; (80008cc <displaysecond7SEG+0x348>)
 80006c0:	f001 f953 	bl	800196a <HAL_GPIO_WritePin>
	 			break ;
 80006c4:	e12f      	b.n	8000926 <displaysecond7SEG+0x3a2>

	 		case 3:

	 			HAL_GPIO_WritePin(SEG0_GPIO_Port , SEG00_Pin , RESET) ;
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006cc:	487f      	ldr	r0, [pc, #508]	; (80008cc <displaysecond7SEG+0x348>)
 80006ce:	f001 f94c 	bl	800196a <HAL_GPIO_WritePin>
	 	        HAL_GPIO_WritePin(SEG1_GPIO_Port , SEG01_Pin , RESET) ;
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d8:	487c      	ldr	r0, [pc, #496]	; (80008cc <displaysecond7SEG+0x348>)
 80006da:	f001 f946 	bl	800196a <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG2_GPIO_Port , SEG02_Pin , RESET) ;
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006e4:	4879      	ldr	r0, [pc, #484]	; (80008cc <displaysecond7SEG+0x348>)
 80006e6:	f001 f940 	bl	800196a <HAL_GPIO_WritePin>
	     		HAL_GPIO_WritePin(SEG3_GPIO_Port , SEG03_Pin , RESET) ;
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f0:	4876      	ldr	r0, [pc, #472]	; (80008cc <displaysecond7SEG+0x348>)
 80006f2:	f001 f93a 	bl	800196a <HAL_GPIO_WritePin>
	 		    HAL_GPIO_WritePin(SEG4_GPIO_Port , SEG04_Pin , SET) ;
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fc:	4873      	ldr	r0, [pc, #460]	; (80008cc <displaysecond7SEG+0x348>)
 80006fe:	f001 f934 	bl	800196a <HAL_GPIO_WritePin>
	 	        HAL_GPIO_WritePin(SEG5_GPIO_Port , SEG05_Pin , SET) ;
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000708:	4870      	ldr	r0, [pc, #448]	; (80008cc <displaysecond7SEG+0x348>)
 800070a:	f001 f92e 	bl	800196a <HAL_GPIO_WritePin>
	 	        HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG06_Pin , RESET) ;
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000714:	486d      	ldr	r0, [pc, #436]	; (80008cc <displaysecond7SEG+0x348>)
 8000716:	f001 f928 	bl	800196a <HAL_GPIO_WritePin>
	 			break ;
 800071a:	e104      	b.n	8000926 <displaysecond7SEG+0x3a2>

	 		case 4:
	 		 	HAL_GPIO_WritePin(SEG0_GPIO_Port , SEG00_Pin , SET) ;
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000722:	486a      	ldr	r0, [pc, #424]	; (80008cc <displaysecond7SEG+0x348>)
 8000724:	f001 f921 	bl	800196a <HAL_GPIO_WritePin>
	 		 	HAL_GPIO_WritePin(SEG1_GPIO_Port , SEG01_Pin , RESET) ;
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800072e:	4867      	ldr	r0, [pc, #412]	; (80008cc <displaysecond7SEG+0x348>)
 8000730:	f001 f91b 	bl	800196a <HAL_GPIO_WritePin>
	 		 	HAL_GPIO_WritePin(SEG2_GPIO_Port , SEG02_Pin , RESET) ;
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800073a:	4864      	ldr	r0, [pc, #400]	; (80008cc <displaysecond7SEG+0x348>)
 800073c:	f001 f915 	bl	800196a <HAL_GPIO_WritePin>
	 		 	HAL_GPIO_WritePin(SEG3_GPIO_Port , SEG03_Pin , SET) ;
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000746:	4861      	ldr	r0, [pc, #388]	; (80008cc <displaysecond7SEG+0x348>)
 8000748:	f001 f90f 	bl	800196a <HAL_GPIO_WritePin>
	 		    HAL_GPIO_WritePin(SEG4_GPIO_Port , SEG04_Pin , SET) ;
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000752:	485e      	ldr	r0, [pc, #376]	; (80008cc <displaysecond7SEG+0x348>)
 8000754:	f001 f909 	bl	800196a <HAL_GPIO_WritePin>
	 		    HAL_GPIO_WritePin(SEG5_GPIO_Port , SEG05_Pin , RESET) ;
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800075e:	485b      	ldr	r0, [pc, #364]	; (80008cc <displaysecond7SEG+0x348>)
 8000760:	f001 f903 	bl	800196a <HAL_GPIO_WritePin>
	 		 	HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG06_Pin , RESET) ;
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800076a:	4858      	ldr	r0, [pc, #352]	; (80008cc <displaysecond7SEG+0x348>)
 800076c:	f001 f8fd 	bl	800196a <HAL_GPIO_WritePin>
	 		    break ;
 8000770:	e0d9      	b.n	8000926 <displaysecond7SEG+0x3a2>

	 		case 5:
	 			HAL_GPIO_WritePin(SEG0_GPIO_Port , SEG00_Pin , RESET) ;
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000778:	4854      	ldr	r0, [pc, #336]	; (80008cc <displaysecond7SEG+0x348>)
 800077a:	f001 f8f6 	bl	800196a <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG1_GPIO_Port , SEG01_Pin , SET) ;
 800077e:	2201      	movs	r2, #1
 8000780:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000784:	4851      	ldr	r0, [pc, #324]	; (80008cc <displaysecond7SEG+0x348>)
 8000786:	f001 f8f0 	bl	800196a <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG2_GPIO_Port , SEG02_Pin , RESET) ;
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000790:	484e      	ldr	r0, [pc, #312]	; (80008cc <displaysecond7SEG+0x348>)
 8000792:	f001 f8ea 	bl	800196a <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG3_GPIO_Port , SEG03_Pin , RESET) ;
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800079c:	484b      	ldr	r0, [pc, #300]	; (80008cc <displaysecond7SEG+0x348>)
 800079e:	f001 f8e4 	bl	800196a <HAL_GPIO_WritePin>
	 		    HAL_GPIO_WritePin(SEG4_GPIO_Port , SEG04_Pin , SET) ;
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a8:	4848      	ldr	r0, [pc, #288]	; (80008cc <displaysecond7SEG+0x348>)
 80007aa:	f001 f8de 	bl	800196a <HAL_GPIO_WritePin>
	 		    HAL_GPIO_WritePin(SEG5_GPIO_Port , SEG05_Pin , RESET) ;
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b4:	4845      	ldr	r0, [pc, #276]	; (80008cc <displaysecond7SEG+0x348>)
 80007b6:	f001 f8d8 	bl	800196a <HAL_GPIO_WritePin>
	 		    HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG06_Pin , RESET) ;
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007c0:	4842      	ldr	r0, [pc, #264]	; (80008cc <displaysecond7SEG+0x348>)
 80007c2:	f001 f8d2 	bl	800196a <HAL_GPIO_WritePin>
	 			break ;
 80007c6:	e0ae      	b.n	8000926 <displaysecond7SEG+0x3a2>

	 		case 6:
	 			HAL_GPIO_WritePin(SEG0_GPIO_Port , SEG00_Pin , RESET) ;
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ce:	483f      	ldr	r0, [pc, #252]	; (80008cc <displaysecond7SEG+0x348>)
 80007d0:	f001 f8cb 	bl	800196a <HAL_GPIO_WritePin>
	 		    HAL_GPIO_WritePin(SEG1_GPIO_Port , SEG01_Pin , SET) ;
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007da:	483c      	ldr	r0, [pc, #240]	; (80008cc <displaysecond7SEG+0x348>)
 80007dc:	f001 f8c5 	bl	800196a <HAL_GPIO_WritePin>
	 		 	HAL_GPIO_WritePin(SEG2_GPIO_Port , SEG02_Pin , RESET) ;
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007e6:	4839      	ldr	r0, [pc, #228]	; (80008cc <displaysecond7SEG+0x348>)
 80007e8:	f001 f8bf 	bl	800196a <HAL_GPIO_WritePin>
	 		 	HAL_GPIO_WritePin(SEG3_GPIO_Port , SEG03_Pin , RESET) ;
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f2:	4836      	ldr	r0, [pc, #216]	; (80008cc <displaysecond7SEG+0x348>)
 80007f4:	f001 f8b9 	bl	800196a <HAL_GPIO_WritePin>
	 		    HAL_GPIO_WritePin(SEG4_GPIO_Port , SEG04_Pin , RESET) ;
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fe:	4833      	ldr	r0, [pc, #204]	; (80008cc <displaysecond7SEG+0x348>)
 8000800:	f001 f8b3 	bl	800196a <HAL_GPIO_WritePin>
	 		 	HAL_GPIO_WritePin(SEG5_GPIO_Port , SEG05_Pin , RESET) ;
 8000804:	2200      	movs	r2, #0
 8000806:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800080a:	4830      	ldr	r0, [pc, #192]	; (80008cc <displaysecond7SEG+0x348>)
 800080c:	f001 f8ad 	bl	800196a <HAL_GPIO_WritePin>
	 		 	HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG06_Pin , RESET) ;
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000816:	482d      	ldr	r0, [pc, #180]	; (80008cc <displaysecond7SEG+0x348>)
 8000818:	f001 f8a7 	bl	800196a <HAL_GPIO_WritePin>
	 			break;
 800081c:	e083      	b.n	8000926 <displaysecond7SEG+0x3a2>

	 		case 7:
	 			HAL_GPIO_WritePin(SEG0_GPIO_Port , SEG00_Pin , RESET) ;
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	4829      	ldr	r0, [pc, #164]	; (80008cc <displaysecond7SEG+0x348>)
 8000826:	f001 f8a0 	bl	800196a <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG1_GPIO_Port , SEG01_Pin , RESET) ;
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000830:	4826      	ldr	r0, [pc, #152]	; (80008cc <displaysecond7SEG+0x348>)
 8000832:	f001 f89a 	bl	800196a <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG2_GPIO_Port , SEG02_Pin , RESET) ;
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083c:	4823      	ldr	r0, [pc, #140]	; (80008cc <displaysecond7SEG+0x348>)
 800083e:	f001 f894 	bl	800196a <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG3_GPIO_Port , SEG03_Pin , SET) ;
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000848:	4820      	ldr	r0, [pc, #128]	; (80008cc <displaysecond7SEG+0x348>)
 800084a:	f001 f88e 	bl	800196a <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG4_GPIO_Port , SEG04_Pin , SET) ;
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000854:	481d      	ldr	r0, [pc, #116]	; (80008cc <displaysecond7SEG+0x348>)
 8000856:	f001 f888 	bl	800196a <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG5_GPIO_Port , SEG05_Pin , SET) ;
 800085a:	2201      	movs	r2, #1
 800085c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000860:	481a      	ldr	r0, [pc, #104]	; (80008cc <displaysecond7SEG+0x348>)
 8000862:	f001 f882 	bl	800196a <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG06_Pin , SET) ;
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800086c:	4817      	ldr	r0, [pc, #92]	; (80008cc <displaysecond7SEG+0x348>)
 800086e:	f001 f87c 	bl	800196a <HAL_GPIO_WritePin>
	 			break ;
 8000872:	e058      	b.n	8000926 <displaysecond7SEG+0x3a2>

	 		case 8:
	 			HAL_GPIO_WritePin(SEG0_GPIO_Port , SEG00_Pin , RESET) ;
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 7100 	mov.w	r1, #512	; 0x200
 800087a:	4814      	ldr	r0, [pc, #80]	; (80008cc <displaysecond7SEG+0x348>)
 800087c:	f001 f875 	bl	800196a <HAL_GPIO_WritePin>
	 		 	HAL_GPIO_WritePin(SEG1_GPIO_Port , SEG01_Pin , RESET) ;
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000886:	4811      	ldr	r0, [pc, #68]	; (80008cc <displaysecond7SEG+0x348>)
 8000888:	f001 f86f 	bl	800196a <HAL_GPIO_WritePin>
	 		 	HAL_GPIO_WritePin(SEG2_GPIO_Port , SEG02_Pin , RESET) ;
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <displaysecond7SEG+0x348>)
 8000894:	f001 f869 	bl	800196a <HAL_GPIO_WritePin>
	 		 	HAL_GPIO_WritePin(SEG3_GPIO_Port , SEG03_Pin , RESET) ;
 8000898:	2200      	movs	r2, #0
 800089a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089e:	480b      	ldr	r0, [pc, #44]	; (80008cc <displaysecond7SEG+0x348>)
 80008a0:	f001 f863 	bl	800196a <HAL_GPIO_WritePin>
	 		    HAL_GPIO_WritePin(SEG4_GPIO_Port , SEG04_Pin , RESET) ;
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008aa:	4808      	ldr	r0, [pc, #32]	; (80008cc <displaysecond7SEG+0x348>)
 80008ac:	f001 f85d 	bl	800196a <HAL_GPIO_WritePin>
	 	        HAL_GPIO_WritePin(SEG5_GPIO_Port , SEG05_Pin , RESET) ;
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <displaysecond7SEG+0x348>)
 80008b8:	f001 f857 	bl	800196a <HAL_GPIO_WritePin>
	 		    HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG06_Pin , RESET) ;
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c2:	4802      	ldr	r0, [pc, #8]	; (80008cc <displaysecond7SEG+0x348>)
 80008c4:	f001 f851 	bl	800196a <HAL_GPIO_WritePin>
	 			break ;
 80008c8:	e02d      	b.n	8000926 <displaysecond7SEG+0x3a2>
 80008ca:	bf00      	nop
 80008cc:	40010c00 	.word	0x40010c00

	 		case 9:
	 			HAL_GPIO_WritePin(SEG0_GPIO_Port , SEG00_Pin , RESET) ;
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d6:	4816      	ldr	r0, [pc, #88]	; (8000930 <displaysecond7SEG+0x3ac>)
 80008d8:	f001 f847 	bl	800196a <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG1_GPIO_Port , SEG01_Pin , RESET) ;
 80008dc:	2200      	movs	r2, #0
 80008de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e2:	4813      	ldr	r0, [pc, #76]	; (8000930 <displaysecond7SEG+0x3ac>)
 80008e4:	f001 f841 	bl	800196a <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG2_GPIO_Port , SEG02_Pin , RESET) ;
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ee:	4810      	ldr	r0, [pc, #64]	; (8000930 <displaysecond7SEG+0x3ac>)
 80008f0:	f001 f83b 	bl	800196a <HAL_GPIO_WritePin>
	 			HAL_GPIO_WritePin(SEG3_GPIO_Port , SEG03_Pin , RESET) ;
 80008f4:	2200      	movs	r2, #0
 80008f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <displaysecond7SEG+0x3ac>)
 80008fc:	f001 f835 	bl	800196a <HAL_GPIO_WritePin>
	 		    HAL_GPIO_WritePin(SEG4_GPIO_Port , SEG04_Pin , SET) ;
 8000900:	2201      	movs	r2, #1
 8000902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000906:	480a      	ldr	r0, [pc, #40]	; (8000930 <displaysecond7SEG+0x3ac>)
 8000908:	f001 f82f 	bl	800196a <HAL_GPIO_WritePin>
	 		    HAL_GPIO_WritePin(SEG5_GPIO_Port , SEG05_Pin , RESET) ;
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000912:	4807      	ldr	r0, [pc, #28]	; (8000930 <displaysecond7SEG+0x3ac>)
 8000914:	f001 f829 	bl	800196a <HAL_GPIO_WritePin>
	 	        HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG06_Pin , RESET) ;
 8000918:	2200      	movs	r2, #0
 800091a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800091e:	4804      	ldr	r0, [pc, #16]	; (8000930 <displaysecond7SEG+0x3ac>)
 8000920:	f001 f823 	bl	800196a <HAL_GPIO_WritePin>
	 			break ;
 8000924:	bf00      	nop


	 	}


}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40010c00 	.word	0x40010c00

08000934 <display7SEG>:


void display7SEG(int count){
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b09      	cmp	r3, #9
 8000940:	f200 8180 	bhi.w	8000c44 <display7SEG+0x310>
 8000944:	a201      	add	r2, pc, #4	; (adr r2, 800094c <display7SEG+0x18>)
 8000946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094a:	bf00      	nop
 800094c:	08000975 	.word	0x08000975
 8000950:	080009bd 	.word	0x080009bd
 8000954:	08000a05 	.word	0x08000a05
 8000958:	08000a4d 	.word	0x08000a4d
 800095c:	08000a95 	.word	0x08000a95
 8000960:	08000add 	.word	0x08000add
 8000964:	08000b25 	.word	0x08000b25
 8000968:	08000b6d 	.word	0x08000b6d
 800096c:	08000bb5 	.word	0x08000bb5
 8000970:	08000bfd 	.word	0x08000bfd

 	switch(count){

 	    case 0:
 	 			HAL_GPIO_WritePin(SEG0_GPIO_Port , SEG0_Pin , RESET) ;
 8000974:	2200      	movs	r2, #0
 8000976:	2101      	movs	r1, #1
 8000978:	48b4      	ldr	r0, [pc, #720]	; (8000c4c <display7SEG+0x318>)
 800097a:	f000 fff6 	bl	800196a <HAL_GPIO_WritePin>
 	 	        HAL_GPIO_WritePin(SEG1_GPIO_Port , SEG1_Pin , RESET) ;
 800097e:	2200      	movs	r2, #0
 8000980:	2102      	movs	r1, #2
 8000982:	48b2      	ldr	r0, [pc, #712]	; (8000c4c <display7SEG+0x318>)
 8000984:	f000 fff1 	bl	800196a <HAL_GPIO_WritePin>
 	 			HAL_GPIO_WritePin(SEG2_GPIO_Port , SEG2_Pin , RESET) ;
 8000988:	2200      	movs	r2, #0
 800098a:	2104      	movs	r1, #4
 800098c:	48af      	ldr	r0, [pc, #700]	; (8000c4c <display7SEG+0x318>)
 800098e:	f000 ffec 	bl	800196a <HAL_GPIO_WritePin>
 	 			HAL_GPIO_WritePin(SEG3_GPIO_Port , SEG3_Pin , RESET) ;
 8000992:	2200      	movs	r2, #0
 8000994:	2108      	movs	r1, #8
 8000996:	48ad      	ldr	r0, [pc, #692]	; (8000c4c <display7SEG+0x318>)
 8000998:	f000 ffe7 	bl	800196a <HAL_GPIO_WritePin>
 	 		    HAL_GPIO_WritePin(SEG4_GPIO_Port , SEG4_Pin , RESET) ;
 800099c:	2200      	movs	r2, #0
 800099e:	2110      	movs	r1, #16
 80009a0:	48aa      	ldr	r0, [pc, #680]	; (8000c4c <display7SEG+0x318>)
 80009a2:	f000 ffe2 	bl	800196a <HAL_GPIO_WritePin>
 	 	        HAL_GPIO_WritePin(SEG5_GPIO_Port , SEG5_Pin , RESET) ;
 80009a6:	2200      	movs	r2, #0
 80009a8:	2120      	movs	r1, #32
 80009aa:	48a8      	ldr	r0, [pc, #672]	; (8000c4c <display7SEG+0x318>)
 80009ac:	f000 ffdd 	bl	800196a <HAL_GPIO_WritePin>
 	 		    HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG6_Pin , SET) ;
 80009b0:	2201      	movs	r2, #1
 80009b2:	2140      	movs	r1, #64	; 0x40
 80009b4:	48a5      	ldr	r0, [pc, #660]	; (8000c4c <display7SEG+0x318>)
 80009b6:	f000 ffd8 	bl	800196a <HAL_GPIO_WritePin>
 	 			break ;
 80009ba:	e143      	b.n	8000c44 <display7SEG+0x310>

 		case 1:


 			 HAL_GPIO_WritePin(SEG0_GPIO_Port , SEG0_Pin , SET) ;
 80009bc:	2201      	movs	r2, #1
 80009be:	2101      	movs	r1, #1
 80009c0:	48a2      	ldr	r0, [pc, #648]	; (8000c4c <display7SEG+0x318>)
 80009c2:	f000 ffd2 	bl	800196a <HAL_GPIO_WritePin>
 			 HAL_GPIO_WritePin(SEG1_GPIO_Port , SEG1_Pin , RESET) ;
 80009c6:	2200      	movs	r2, #0
 80009c8:	2102      	movs	r1, #2
 80009ca:	48a0      	ldr	r0, [pc, #640]	; (8000c4c <display7SEG+0x318>)
 80009cc:	f000 ffcd 	bl	800196a <HAL_GPIO_WritePin>
 			 HAL_GPIO_WritePin(SEG2_GPIO_Port , SEG2_Pin , RESET) ;
 80009d0:	2200      	movs	r2, #0
 80009d2:	2104      	movs	r1, #4
 80009d4:	489d      	ldr	r0, [pc, #628]	; (8000c4c <display7SEG+0x318>)
 80009d6:	f000 ffc8 	bl	800196a <HAL_GPIO_WritePin>
 			 HAL_GPIO_WritePin(SEG3_GPIO_Port , SEG3_Pin , SET) ;
 80009da:	2201      	movs	r2, #1
 80009dc:	2108      	movs	r1, #8
 80009de:	489b      	ldr	r0, [pc, #620]	; (8000c4c <display7SEG+0x318>)
 80009e0:	f000 ffc3 	bl	800196a <HAL_GPIO_WritePin>
 			 HAL_GPIO_WritePin(SEG4_GPIO_Port , SEG4_Pin , SET) ;
 80009e4:	2201      	movs	r2, #1
 80009e6:	2110      	movs	r1, #16
 80009e8:	4898      	ldr	r0, [pc, #608]	; (8000c4c <display7SEG+0x318>)
 80009ea:	f000 ffbe 	bl	800196a <HAL_GPIO_WritePin>
 			 HAL_GPIO_WritePin(SEG5_GPIO_Port , SEG5_Pin , SET) ;
 80009ee:	2201      	movs	r2, #1
 80009f0:	2120      	movs	r1, #32
 80009f2:	4896      	ldr	r0, [pc, #600]	; (8000c4c <display7SEG+0x318>)
 80009f4:	f000 ffb9 	bl	800196a <HAL_GPIO_WritePin>
 			 HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG6_Pin , SET) ;
 80009f8:	2201      	movs	r2, #1
 80009fa:	2140      	movs	r1, #64	; 0x40
 80009fc:	4893      	ldr	r0, [pc, #588]	; (8000c4c <display7SEG+0x318>)
 80009fe:	f000 ffb4 	bl	800196a <HAL_GPIO_WritePin>
 			 break ;
 8000a02:	e11f      	b.n	8000c44 <display7SEG+0x310>

 		case 2:

 			HAL_GPIO_WritePin(SEG0_GPIO_Port , SEG0_Pin , RESET) ;
 8000a04:	2200      	movs	r2, #0
 8000a06:	2101      	movs	r1, #1
 8000a08:	4890      	ldr	r0, [pc, #576]	; (8000c4c <display7SEG+0x318>)
 8000a0a:	f000 ffae 	bl	800196a <HAL_GPIO_WritePin>
 	        HAL_GPIO_WritePin(SEG1_GPIO_Port , SEG1_Pin , RESET) ;
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2102      	movs	r1, #2
 8000a12:	488e      	ldr	r0, [pc, #568]	; (8000c4c <display7SEG+0x318>)
 8000a14:	f000 ffa9 	bl	800196a <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(SEG2_GPIO_Port , SEG2_Pin , SET) ;
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2104      	movs	r1, #4
 8000a1c:	488b      	ldr	r0, [pc, #556]	; (8000c4c <display7SEG+0x318>)
 8000a1e:	f000 ffa4 	bl	800196a <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(SEG3_GPIO_Port , SEG3_Pin , RESET) ;
 8000a22:	2200      	movs	r2, #0
 8000a24:	2108      	movs	r1, #8
 8000a26:	4889      	ldr	r0, [pc, #548]	; (8000c4c <display7SEG+0x318>)
 8000a28:	f000 ff9f 	bl	800196a <HAL_GPIO_WritePin>
 		    HAL_GPIO_WritePin(SEG4_GPIO_Port , SEG4_Pin , RESET) ;
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2110      	movs	r1, #16
 8000a30:	4886      	ldr	r0, [pc, #536]	; (8000c4c <display7SEG+0x318>)
 8000a32:	f000 ff9a 	bl	800196a <HAL_GPIO_WritePin>
 	        HAL_GPIO_WritePin(SEG5_GPIO_Port , SEG5_Pin , SET) ;
 8000a36:	2201      	movs	r2, #1
 8000a38:	2120      	movs	r1, #32
 8000a3a:	4884      	ldr	r0, [pc, #528]	; (8000c4c <display7SEG+0x318>)
 8000a3c:	f000 ff95 	bl	800196a <HAL_GPIO_WritePin>
 		    HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG6_Pin , RESET) ;
 8000a40:	2200      	movs	r2, #0
 8000a42:	2140      	movs	r1, #64	; 0x40
 8000a44:	4881      	ldr	r0, [pc, #516]	; (8000c4c <display7SEG+0x318>)
 8000a46:	f000 ff90 	bl	800196a <HAL_GPIO_WritePin>
 			break ;
 8000a4a:	e0fb      	b.n	8000c44 <display7SEG+0x310>

 		case 3:

 			HAL_GPIO_WritePin(SEG0_GPIO_Port , SEG0_Pin , RESET) ;
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2101      	movs	r1, #1
 8000a50:	487e      	ldr	r0, [pc, #504]	; (8000c4c <display7SEG+0x318>)
 8000a52:	f000 ff8a 	bl	800196a <HAL_GPIO_WritePin>
 	        HAL_GPIO_WritePin(SEG1_GPIO_Port , SEG1_Pin , RESET) ;
 8000a56:	2200      	movs	r2, #0
 8000a58:	2102      	movs	r1, #2
 8000a5a:	487c      	ldr	r0, [pc, #496]	; (8000c4c <display7SEG+0x318>)
 8000a5c:	f000 ff85 	bl	800196a <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(SEG2_GPIO_Port , SEG2_Pin , RESET) ;
 8000a60:	2200      	movs	r2, #0
 8000a62:	2104      	movs	r1, #4
 8000a64:	4879      	ldr	r0, [pc, #484]	; (8000c4c <display7SEG+0x318>)
 8000a66:	f000 ff80 	bl	800196a <HAL_GPIO_WritePin>
     		HAL_GPIO_WritePin(SEG3_GPIO_Port , SEG3_Pin , RESET) ;
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2108      	movs	r1, #8
 8000a6e:	4877      	ldr	r0, [pc, #476]	; (8000c4c <display7SEG+0x318>)
 8000a70:	f000 ff7b 	bl	800196a <HAL_GPIO_WritePin>
 		    HAL_GPIO_WritePin(SEG4_GPIO_Port , SEG4_Pin , SET) ;
 8000a74:	2201      	movs	r2, #1
 8000a76:	2110      	movs	r1, #16
 8000a78:	4874      	ldr	r0, [pc, #464]	; (8000c4c <display7SEG+0x318>)
 8000a7a:	f000 ff76 	bl	800196a <HAL_GPIO_WritePin>
 	        HAL_GPIO_WritePin(SEG5_GPIO_Port , SEG5_Pin , SET) ;
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2120      	movs	r1, #32
 8000a82:	4872      	ldr	r0, [pc, #456]	; (8000c4c <display7SEG+0x318>)
 8000a84:	f000 ff71 	bl	800196a <HAL_GPIO_WritePin>
 	        HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG6_Pin , RESET) ;
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2140      	movs	r1, #64	; 0x40
 8000a8c:	486f      	ldr	r0, [pc, #444]	; (8000c4c <display7SEG+0x318>)
 8000a8e:	f000 ff6c 	bl	800196a <HAL_GPIO_WritePin>
 			break ;
 8000a92:	e0d7      	b.n	8000c44 <display7SEG+0x310>

 		case 4:
 		 	HAL_GPIO_WritePin(SEG0_GPIO_Port , SEG0_Pin , SET) ;
 8000a94:	2201      	movs	r2, #1
 8000a96:	2101      	movs	r1, #1
 8000a98:	486c      	ldr	r0, [pc, #432]	; (8000c4c <display7SEG+0x318>)
 8000a9a:	f000 ff66 	bl	800196a <HAL_GPIO_WritePin>
 		 	HAL_GPIO_WritePin(SEG1_GPIO_Port , SEG1_Pin , RESET) ;
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	486a      	ldr	r0, [pc, #424]	; (8000c4c <display7SEG+0x318>)
 8000aa4:	f000 ff61 	bl	800196a <HAL_GPIO_WritePin>
 		 	HAL_GPIO_WritePin(SEG2_GPIO_Port , SEG2_Pin , RESET) ;
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2104      	movs	r1, #4
 8000aac:	4867      	ldr	r0, [pc, #412]	; (8000c4c <display7SEG+0x318>)
 8000aae:	f000 ff5c 	bl	800196a <HAL_GPIO_WritePin>
 		 	HAL_GPIO_WritePin(SEG3_GPIO_Port , SEG3_Pin , SET) ;
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2108      	movs	r1, #8
 8000ab6:	4865      	ldr	r0, [pc, #404]	; (8000c4c <display7SEG+0x318>)
 8000ab8:	f000 ff57 	bl	800196a <HAL_GPIO_WritePin>
 		    HAL_GPIO_WritePin(SEG4_GPIO_Port , SEG4_Pin , SET) ;
 8000abc:	2201      	movs	r2, #1
 8000abe:	2110      	movs	r1, #16
 8000ac0:	4862      	ldr	r0, [pc, #392]	; (8000c4c <display7SEG+0x318>)
 8000ac2:	f000 ff52 	bl	800196a <HAL_GPIO_WritePin>
 		    HAL_GPIO_WritePin(SEG5_GPIO_Port , SEG5_Pin , RESET) ;
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2120      	movs	r1, #32
 8000aca:	4860      	ldr	r0, [pc, #384]	; (8000c4c <display7SEG+0x318>)
 8000acc:	f000 ff4d 	bl	800196a <HAL_GPIO_WritePin>
 		 	HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG6_Pin , RESET) ;
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2140      	movs	r1, #64	; 0x40
 8000ad4:	485d      	ldr	r0, [pc, #372]	; (8000c4c <display7SEG+0x318>)
 8000ad6:	f000 ff48 	bl	800196a <HAL_GPIO_WritePin>
 		    break ;
 8000ada:	e0b3      	b.n	8000c44 <display7SEG+0x310>

 		case 5:
 			HAL_GPIO_WritePin(SEG0_GPIO_Port , SEG0_Pin , RESET) ;
 8000adc:	2200      	movs	r2, #0
 8000ade:	2101      	movs	r1, #1
 8000ae0:	485a      	ldr	r0, [pc, #360]	; (8000c4c <display7SEG+0x318>)
 8000ae2:	f000 ff42 	bl	800196a <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(SEG1_GPIO_Port , SEG1_Pin , SET) ;
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	2102      	movs	r1, #2
 8000aea:	4858      	ldr	r0, [pc, #352]	; (8000c4c <display7SEG+0x318>)
 8000aec:	f000 ff3d 	bl	800196a <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(SEG2_GPIO_Port , SEG2_Pin , RESET) ;
 8000af0:	2200      	movs	r2, #0
 8000af2:	2104      	movs	r1, #4
 8000af4:	4855      	ldr	r0, [pc, #340]	; (8000c4c <display7SEG+0x318>)
 8000af6:	f000 ff38 	bl	800196a <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(SEG3_GPIO_Port , SEG3_Pin , RESET) ;
 8000afa:	2200      	movs	r2, #0
 8000afc:	2108      	movs	r1, #8
 8000afe:	4853      	ldr	r0, [pc, #332]	; (8000c4c <display7SEG+0x318>)
 8000b00:	f000 ff33 	bl	800196a <HAL_GPIO_WritePin>
 		    HAL_GPIO_WritePin(SEG4_GPIO_Port , SEG4_Pin , SET) ;
 8000b04:	2201      	movs	r2, #1
 8000b06:	2110      	movs	r1, #16
 8000b08:	4850      	ldr	r0, [pc, #320]	; (8000c4c <display7SEG+0x318>)
 8000b0a:	f000 ff2e 	bl	800196a <HAL_GPIO_WritePin>
 		    HAL_GPIO_WritePin(SEG5_GPIO_Port , SEG5_Pin , RESET) ;
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2120      	movs	r1, #32
 8000b12:	484e      	ldr	r0, [pc, #312]	; (8000c4c <display7SEG+0x318>)
 8000b14:	f000 ff29 	bl	800196a <HAL_GPIO_WritePin>
 		    HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG6_Pin , RESET) ;
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	484b      	ldr	r0, [pc, #300]	; (8000c4c <display7SEG+0x318>)
 8000b1e:	f000 ff24 	bl	800196a <HAL_GPIO_WritePin>
 			break ;
 8000b22:	e08f      	b.n	8000c44 <display7SEG+0x310>

 		case 6:
 			HAL_GPIO_WritePin(SEG0_GPIO_Port , SEG0_Pin , RESET) ;
 8000b24:	2200      	movs	r2, #0
 8000b26:	2101      	movs	r1, #1
 8000b28:	4848      	ldr	r0, [pc, #288]	; (8000c4c <display7SEG+0x318>)
 8000b2a:	f000 ff1e 	bl	800196a <HAL_GPIO_WritePin>
 		    HAL_GPIO_WritePin(SEG1_GPIO_Port , SEG1_Pin , SET) ;
 8000b2e:	2201      	movs	r2, #1
 8000b30:	2102      	movs	r1, #2
 8000b32:	4846      	ldr	r0, [pc, #280]	; (8000c4c <display7SEG+0x318>)
 8000b34:	f000 ff19 	bl	800196a <HAL_GPIO_WritePin>
 		 	HAL_GPIO_WritePin(SEG2_GPIO_Port , SEG2_Pin , RESET) ;
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2104      	movs	r1, #4
 8000b3c:	4843      	ldr	r0, [pc, #268]	; (8000c4c <display7SEG+0x318>)
 8000b3e:	f000 ff14 	bl	800196a <HAL_GPIO_WritePin>
 		 	HAL_GPIO_WritePin(SEG3_GPIO_Port , SEG3_Pin , RESET) ;
 8000b42:	2200      	movs	r2, #0
 8000b44:	2108      	movs	r1, #8
 8000b46:	4841      	ldr	r0, [pc, #260]	; (8000c4c <display7SEG+0x318>)
 8000b48:	f000 ff0f 	bl	800196a <HAL_GPIO_WritePin>
 		    HAL_GPIO_WritePin(SEG4_GPIO_Port , SEG4_Pin , RESET) ;
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2110      	movs	r1, #16
 8000b50:	483e      	ldr	r0, [pc, #248]	; (8000c4c <display7SEG+0x318>)
 8000b52:	f000 ff0a 	bl	800196a <HAL_GPIO_WritePin>
 		 	HAL_GPIO_WritePin(SEG5_GPIO_Port , SEG5_Pin , RESET) ;
 8000b56:	2200      	movs	r2, #0
 8000b58:	2120      	movs	r1, #32
 8000b5a:	483c      	ldr	r0, [pc, #240]	; (8000c4c <display7SEG+0x318>)
 8000b5c:	f000 ff05 	bl	800196a <HAL_GPIO_WritePin>
 		 	HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG6_Pin , RESET) ;
 8000b60:	2200      	movs	r2, #0
 8000b62:	2140      	movs	r1, #64	; 0x40
 8000b64:	4839      	ldr	r0, [pc, #228]	; (8000c4c <display7SEG+0x318>)
 8000b66:	f000 ff00 	bl	800196a <HAL_GPIO_WritePin>
 			break;
 8000b6a:	e06b      	b.n	8000c44 <display7SEG+0x310>

 		case 7:
 			HAL_GPIO_WritePin(SEG0_GPIO_Port , SEG0_Pin , RESET) ;
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2101      	movs	r1, #1
 8000b70:	4836      	ldr	r0, [pc, #216]	; (8000c4c <display7SEG+0x318>)
 8000b72:	f000 fefa 	bl	800196a <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(SEG1_GPIO_Port , SEG1_Pin , RESET) ;
 8000b76:	2200      	movs	r2, #0
 8000b78:	2102      	movs	r1, #2
 8000b7a:	4834      	ldr	r0, [pc, #208]	; (8000c4c <display7SEG+0x318>)
 8000b7c:	f000 fef5 	bl	800196a <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(SEG2_GPIO_Port , SEG2_Pin , RESET) ;
 8000b80:	2200      	movs	r2, #0
 8000b82:	2104      	movs	r1, #4
 8000b84:	4831      	ldr	r0, [pc, #196]	; (8000c4c <display7SEG+0x318>)
 8000b86:	f000 fef0 	bl	800196a <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(SEG3_GPIO_Port , SEG3_Pin , SET) ;
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	2108      	movs	r1, #8
 8000b8e:	482f      	ldr	r0, [pc, #188]	; (8000c4c <display7SEG+0x318>)
 8000b90:	f000 feeb 	bl	800196a <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(SEG4_GPIO_Port , SEG4_Pin , SET) ;
 8000b94:	2201      	movs	r2, #1
 8000b96:	2110      	movs	r1, #16
 8000b98:	482c      	ldr	r0, [pc, #176]	; (8000c4c <display7SEG+0x318>)
 8000b9a:	f000 fee6 	bl	800196a <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(SEG5_GPIO_Port , SEG5_Pin , SET) ;
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2120      	movs	r1, #32
 8000ba2:	482a      	ldr	r0, [pc, #168]	; (8000c4c <display7SEG+0x318>)
 8000ba4:	f000 fee1 	bl	800196a <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG6_Pin , SET) ;
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2140      	movs	r1, #64	; 0x40
 8000bac:	4827      	ldr	r0, [pc, #156]	; (8000c4c <display7SEG+0x318>)
 8000bae:	f000 fedc 	bl	800196a <HAL_GPIO_WritePin>
 			break ;
 8000bb2:	e047      	b.n	8000c44 <display7SEG+0x310>

 		case 8:
 			HAL_GPIO_WritePin(SEG0_GPIO_Port , SEG0_Pin , RESET) ;
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	4824      	ldr	r0, [pc, #144]	; (8000c4c <display7SEG+0x318>)
 8000bba:	f000 fed6 	bl	800196a <HAL_GPIO_WritePin>
 		 	HAL_GPIO_WritePin(SEG1_GPIO_Port , SEG1_Pin , RESET) ;
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2102      	movs	r1, #2
 8000bc2:	4822      	ldr	r0, [pc, #136]	; (8000c4c <display7SEG+0x318>)
 8000bc4:	f000 fed1 	bl	800196a <HAL_GPIO_WritePin>
 		 	HAL_GPIO_WritePin(SEG2_GPIO_Port , SEG2_Pin , RESET) ;
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2104      	movs	r1, #4
 8000bcc:	481f      	ldr	r0, [pc, #124]	; (8000c4c <display7SEG+0x318>)
 8000bce:	f000 fecc 	bl	800196a <HAL_GPIO_WritePin>
 		 	HAL_GPIO_WritePin(SEG3_GPIO_Port , SEG3_Pin , RESET) ;
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	481d      	ldr	r0, [pc, #116]	; (8000c4c <display7SEG+0x318>)
 8000bd8:	f000 fec7 	bl	800196a <HAL_GPIO_WritePin>
 		    HAL_GPIO_WritePin(SEG4_GPIO_Port , SEG4_Pin , RESET) ;
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2110      	movs	r1, #16
 8000be0:	481a      	ldr	r0, [pc, #104]	; (8000c4c <display7SEG+0x318>)
 8000be2:	f000 fec2 	bl	800196a <HAL_GPIO_WritePin>
 	        HAL_GPIO_WritePin(SEG5_GPIO_Port , SEG5_Pin , RESET) ;
 8000be6:	2200      	movs	r2, #0
 8000be8:	2120      	movs	r1, #32
 8000bea:	4818      	ldr	r0, [pc, #96]	; (8000c4c <display7SEG+0x318>)
 8000bec:	f000 febd 	bl	800196a <HAL_GPIO_WritePin>
 		    HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG6_Pin , RESET) ;
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2140      	movs	r1, #64	; 0x40
 8000bf4:	4815      	ldr	r0, [pc, #84]	; (8000c4c <display7SEG+0x318>)
 8000bf6:	f000 feb8 	bl	800196a <HAL_GPIO_WritePin>
 			break ;
 8000bfa:	e023      	b.n	8000c44 <display7SEG+0x310>

 		case 9:
 			HAL_GPIO_WritePin(SEG0_GPIO_Port , SEG0_Pin , RESET) ;
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2101      	movs	r1, #1
 8000c00:	4812      	ldr	r0, [pc, #72]	; (8000c4c <display7SEG+0x318>)
 8000c02:	f000 feb2 	bl	800196a <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(SEG1_GPIO_Port , SEG1_Pin , RESET) ;
 8000c06:	2200      	movs	r2, #0
 8000c08:	2102      	movs	r1, #2
 8000c0a:	4810      	ldr	r0, [pc, #64]	; (8000c4c <display7SEG+0x318>)
 8000c0c:	f000 fead 	bl	800196a <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(SEG2_GPIO_Port , SEG2_Pin , RESET) ;
 8000c10:	2200      	movs	r2, #0
 8000c12:	2104      	movs	r1, #4
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <display7SEG+0x318>)
 8000c16:	f000 fea8 	bl	800196a <HAL_GPIO_WritePin>
 			HAL_GPIO_WritePin(SEG3_GPIO_Port , SEG3_Pin , RESET) ;
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2108      	movs	r1, #8
 8000c1e:	480b      	ldr	r0, [pc, #44]	; (8000c4c <display7SEG+0x318>)
 8000c20:	f000 fea3 	bl	800196a <HAL_GPIO_WritePin>
 		    HAL_GPIO_WritePin(SEG4_GPIO_Port , SEG4_Pin , SET) ;
 8000c24:	2201      	movs	r2, #1
 8000c26:	2110      	movs	r1, #16
 8000c28:	4808      	ldr	r0, [pc, #32]	; (8000c4c <display7SEG+0x318>)
 8000c2a:	f000 fe9e 	bl	800196a <HAL_GPIO_WritePin>
 		    HAL_GPIO_WritePin(SEG5_GPIO_Port , SEG5_Pin , RESET) ;
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2120      	movs	r1, #32
 8000c32:	4806      	ldr	r0, [pc, #24]	; (8000c4c <display7SEG+0x318>)
 8000c34:	f000 fe99 	bl	800196a <HAL_GPIO_WritePin>
 	        HAL_GPIO_WritePin(SEG6_GPIO_Port , SEG6_Pin , RESET) ;
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2140      	movs	r1, #64	; 0x40
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <display7SEG+0x318>)
 8000c3e:	f000 fe94 	bl	800196a <HAL_GPIO_WritePin>
 			break ;
 8000c42:	bf00      	nop


 	}


 } ;
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40010c00 	.word	0x40010c00

08000c50 <HAL_TIM_PeriodElapsedCallback>:

   }


 int second_traffic_mode = 1 ; int second_led_counter = 1 ; int second_led_value =  3 ;
 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

          timerRun1();
 8000c58:	f000 f9b6 	bl	8000fc8 <timerRun1>
          timerRun2();
 8000c5c:	f000 f9ce 	bl	8000ffc <timerRun2>
          timerRun3();
 8000c60:	f000 f9fa 	bl	8001058 <timerRun3>
          timerRun4();
 8000c64:	f000 fa26 	bl	80010b4 <timerRun4>
          getKeyInput()       ;
 8000c68:	f7ff fa8e 	bl	8000188 <getKeyInput>
          fsm_automatic_run() ;
 8000c6c:	f7ff fada 	bl	8000224 <fsm_automatic_run>



          if(timer3_flag == 1){
 8000c70:	4b3c      	ldr	r3, [pc, #240]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d15e      	bne.n	8000d36 <HAL_TIM_PeriodElapsedCallback+0xe6>

        		  switch(second_traffic_mode){
 8000c78:	4b3b      	ldr	r3, [pc, #236]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b03      	cmp	r3, #3
 8000c7e:	d040      	beq.n	8000d02 <HAL_TIM_PeriodElapsedCallback+0xb2>
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	dc59      	bgt.n	8000d38 <HAL_TIM_PeriodElapsedCallback+0xe8>
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d002      	beq.n	8000c8e <HAL_TIM_PeriodElapsedCallback+0x3e>
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d01f      	beq.n	8000ccc <HAL_TIM_PeriodElapsedCallback+0x7c>
 8000c8c:	e054      	b.n	8000d38 <HAL_TIM_PeriodElapsedCallback+0xe8>

        		  case 1:
        			  second_led_value = 3 ;
 8000c8e:	4b37      	ldr	r3, [pc, #220]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c90:	2203      	movs	r2, #3
 8000c92:	601a      	str	r2, [r3, #0]
        			  second_led_counter = 100;
 8000c94:	4b36      	ldr	r3, [pc, #216]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000c96:	2264      	movs	r2, #100	; 0x64
 8000c98:	601a      	str	r2, [r3, #0]
        			  displaysecond7SEG(second_led_value) ;
 8000c9a:	4b34      	ldr	r3, [pc, #208]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fc70 	bl	8000584 <displaysecond7SEG>
        			  HAL_GPIO_WritePin(GREEN_GPIO_Port , GREEN_Pin ,  RESET) ;
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2108      	movs	r1, #8
 8000ca8:	4832      	ldr	r0, [pc, #200]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000caa:	f000 fe5e 	bl	800196a <HAL_GPIO_WritePin>
        			  HAL_GPIO_WritePin(RED_GPIO_Port , RED_Pin ,  SET) ;
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	4830      	ldr	r0, [pc, #192]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000cb4:	f000 fe59 	bl	800196a <HAL_GPIO_WritePin>

        			  setTimer3(300) ;
 8000cb8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000cbc:	f000 f9b8 	bl	8001030 <setTimer3>
        			  second_traffic_mode++ ;
 8000cc0:	4b29      	ldr	r3, [pc, #164]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	4a28      	ldr	r2, [pc, #160]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000cc8:	6013      	str	r3, [r2, #0]
        			  break ;
 8000cca:	e035      	b.n	8000d38 <HAL_TIM_PeriodElapsedCallback+0xe8>

        		  case 2:
        			  second_led_value = 2 ; display7SEG(second_led_value) ;
 8000ccc:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000cce:	2202      	movs	r2, #2
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fe2c 	bl	8000934 <display7SEG>
        			  HAL_GPIO_WritePin(GREEN_GPIO_Port , GREEN_Pin ,    SET) ;
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2108      	movs	r1, #8
 8000ce0:	4824      	ldr	r0, [pc, #144]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000ce2:	f000 fe42 	bl	800196a <HAL_GPIO_WritePin>
        			  HAL_GPIO_WritePin(YELLOW_GPIO_Port , YELLOW_Pin ,  RESET) ;
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2104      	movs	r1, #4
 8000cea:	4822      	ldr	r0, [pc, #136]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000cec:	f000 fe3d 	bl	800196a <HAL_GPIO_WritePin>
        			  setTimer3(200) ;
 8000cf0:	20c8      	movs	r0, #200	; 0xc8
 8000cf2:	f000 f99d 	bl	8001030 <setTimer3>
        			  second_traffic_mode++ ;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	4a1a      	ldr	r2, [pc, #104]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000cfe:	6013      	str	r3, [r2, #0]

        			  break ;
 8000d00:	e01a      	b.n	8000d38 <HAL_TIM_PeriodElapsedCallback+0xe8>

        		  case 3:
        			  second_led_value = 5 ; displaysecond7SEG(second_led_value) ;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000d04:	2205      	movs	r2, #5
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fc39 	bl	8000584 <displaysecond7SEG>
        			  HAL_GPIO_WritePin(RED_GPIO_Port , RED_Pin ,  RESET) ;
 8000d12:	2200      	movs	r2, #0
 8000d14:	2102      	movs	r1, #2
 8000d16:	4817      	ldr	r0, [pc, #92]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000d18:	f000 fe27 	bl	800196a <HAL_GPIO_WritePin>
        			  HAL_GPIO_WritePin(YELLOW_GPIO_Port , YELLOW_Pin ,  SET) ;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2104      	movs	r1, #4
 8000d20:	4814      	ldr	r0, [pc, #80]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000d22:	f000 fe22 	bl	800196a <HAL_GPIO_WritePin>
                      setTimer3(500)          ;
 8000d26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d2a:	f000 f981 	bl	8001030 <setTimer3>
        			  second_traffic_mode = 1 ;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	601a      	str	r2, [r3, #0]
        			  break ;
 8000d34:	e000      	b.n	8000d38 <HAL_TIM_PeriodElapsedCallback+0xe8>


        		  }
        	  }
 8000d36:	bf00      	nop

           if(timer4_flag == 1){
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d10c      	bne.n	8000d5a <HAL_TIM_PeriodElapsedCallback+0x10a>
        	   displaysecond7SEG(second_led_value) ;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fc1d 	bl	8000584 <displaysecond7SEG>
        	   second_led_value-- ;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000d52:	6013      	str	r3, [r2, #0]
        	   setTimer4(100)     ;
 8000d54:	2064      	movs	r0, #100	; 0x64
 8000d56:	f000 f999 	bl	800108c <setTimer4>
           }
          }
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000064 	.word	0x20000064
 8000d68:	20000014 	.word	0x20000014
 8000d6c:	2000001c 	.word	0x2000001c
 8000d70:	20000018 	.word	0x20000018
 8000d74:	40010800 	.word	0x40010800
 8000d78:	2000006c 	.word	0x2000006c

08000d7c <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b090      	sub	sp, #64	; 0x40
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 0318 	add.w	r3, r7, #24
 8000d86:	2228      	movs	r2, #40	; 0x28
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f001 fdf6 	bl	800297c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da2:	2301      	movs	r3, #1
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da6:	2310      	movs	r3, #16
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dae:	f107 0318 	add.w	r3, r7, #24
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 fdf2 	bl	800199c <HAL_RCC_OscConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000dbe:	f000 f8d5 	bl	8000f6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc2:	230f      	movs	r3, #15
 8000dc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 f85e 	bl	8001e9c <HAL_RCC_ClockConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000de6:	f000 f8c1 	bl	8000f6c <Error_Handler>
  }
}
 8000dea:	bf00      	nop
 8000dec:	3740      	adds	r7, #64	; 0x40
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e08:	463b      	mov	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <MX_TIM2_Init+0x94>)
 8000e12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <MX_TIM2_Init+0x94>)
 8000e1a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <MX_TIM2_Init+0x94>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <MX_TIM2_Init+0x94>)
 8000e28:	2209      	movs	r2, #9
 8000e2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2c:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <MX_TIM2_Init+0x94>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <MX_TIM2_Init+0x94>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e38:	4813      	ldr	r0, [pc, #76]	; (8000e88 <MX_TIM2_Init+0x94>)
 8000e3a:	f001 f997 	bl	800216c <HAL_TIM_Base_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e44:	f000 f892 	bl	8000f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	4619      	mov	r1, r3
 8000e54:	480c      	ldr	r0, [pc, #48]	; (8000e88 <MX_TIM2_Init+0x94>)
 8000e56:	f001 fb2d 	bl	80024b4 <HAL_TIM_ConfigClockSource>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e60:	f000 f884 	bl	8000f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e64:	2300      	movs	r3, #0
 8000e66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_TIM2_Init+0x94>)
 8000e72:	f001 fcf5 	bl	8002860 <HAL_TIMEx_MasterConfigSynchronization>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e7c:	f000 f876 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000070 	.word	0x20000070

08000e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e92:	f107 0310 	add.w	r3, r7, #16
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea0:	4b2e      	ldr	r3, [pc, #184]	; (8000f5c <MX_GPIO_Init+0xd0>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a2d      	ldr	r2, [pc, #180]	; (8000f5c <MX_GPIO_Init+0xd0>)
 8000ea6:	f043 0310 	orr.w	r3, r3, #16
 8000eaa:	6193      	str	r3, [r2, #24]
 8000eac:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <MX_GPIO_Init+0xd0>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f003 0310 	and.w	r3, r3, #16
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb8:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <MX_GPIO_Init+0xd0>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a27      	ldr	r2, [pc, #156]	; (8000f5c <MX_GPIO_Init+0xd0>)
 8000ebe:	f043 0304 	orr.w	r3, r3, #4
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b25      	ldr	r3, [pc, #148]	; (8000f5c <MX_GPIO_Init+0xd0>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed0:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <MX_GPIO_Init+0xd0>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a21      	ldr	r2, [pc, #132]	; (8000f5c <MX_GPIO_Init+0xd0>)
 8000ed6:	f043 0308 	orr.w	r3, r3, #8
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <MX_GPIO_Init+0xd0>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0308 	and.w	r3, r3, #8
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_Pin|YELLOW_Pin|GREEN_Pin|LED_RED_Pin
 8000ee8:	2200      	movs	r2, #0
 8000eea:	21ee      	movs	r1, #238	; 0xee
 8000eec:	481c      	ldr	r0, [pc, #112]	; (8000f60 <MX_GPIO_Init+0xd4>)
 8000eee:	f000 fd3c 	bl	800196a <HAL_GPIO_WritePin>
                          |LED_YELLOW_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG01_Pin
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f64f 617f 	movw	r1, #65151	; 0xfe7f
 8000ef8:	481a      	ldr	r0, [pc, #104]	; (8000f64 <MX_GPIO_Init+0xd8>)
 8000efa:	f000 fd36 	bl	800196a <HAL_GPIO_WritePin>
                          |SEG02_Pin|SEG03_Pin|SEG04_Pin|SEG05_Pin
                          |SEG06_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|SEG00_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : button1_Pin */
  GPIO_InitStruct.Pin = button1_Pin;
 8000efe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button1_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f107 0310 	add.w	r3, r7, #16
 8000f10:	4619      	mov	r1, r3
 8000f12:	4815      	ldr	r0, [pc, #84]	; (8000f68 <MX_GPIO_Init+0xdc>)
 8000f14:	f000 fb98 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_Pin YELLOW_Pin GREEN_Pin LED_RED_Pin
                           LED_YELLOW_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = RED_Pin|YELLOW_Pin|GREEN_Pin|LED_RED_Pin
 8000f18:	23ee      	movs	r3, #238	; 0xee
 8000f1a:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW_Pin|LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2302      	movs	r3, #2
 8000f26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480c      	ldr	r0, [pc, #48]	; (8000f60 <MX_GPIO_Init+0xd4>)
 8000f30:	f000 fb8a 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG01_Pin
                           SEG02_Pin SEG03_Pin SEG04_Pin SEG05_Pin
                           SEG06_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin SEG00_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG01_Pin
 8000f34:	f64f 637f 	movw	r3, #65151	; 0xfe7f
 8000f38:	613b      	str	r3, [r7, #16]
                          |SEG02_Pin|SEG03_Pin|SEG04_Pin|SEG05_Pin
                          |SEG06_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|SEG00_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_GPIO_Init+0xd8>)
 8000f4e:	f000 fb7b 	bl	8001648 <HAL_GPIO_Init>

}
 8000f52:	bf00      	nop
 8000f54:	3720      	adds	r7, #32
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40010800 	.word	0x40010800
 8000f64:	40010c00 	.word	0x40010c00
 8000f68:	40011000 	.word	0x40011000

08000f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
}
 8000f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <Error_Handler+0x8>
	...

08000f78 <setTimer1>:
int timer2_flag = 0 ;

int button_timer_counter = 0 ;
int button_timer_flag = 0 ;

void setTimer1(int duration){
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration ;
 8000f80:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <setTimer1+0x20>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
	timer1_flag = 0 ;
 8000f86:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <setTimer1+0x24>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
	}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000050 	.word	0x20000050
 8000f9c:	20000054 	.word	0x20000054

08000fa0 <setTimer2>:

void setTimer2(int duration){
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration ;
 8000fa8:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <setTimer2+0x20>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
	timer2_flag = 0 ;
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <setTimer2+0x24>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
	}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000058 	.word	0x20000058
 8000fc4:	2000005c 	.word	0x2000005c

08000fc8 <timerRun1>:



void timerRun1(){
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <timerRun1+0x2c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	dd0b      	ble.n	8000fec <timerRun1+0x24>
		timer1_counter-- ;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <timerRun1+0x2c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <timerRun1+0x2c>)
 8000fdc:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0 ){
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <timerRun1+0x2c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	dc02      	bgt.n	8000fec <timerRun1+0x24>
			timer1_flag = 1;
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <timerRun1+0x30>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	20000050 	.word	0x20000050
 8000ff8:	20000054 	.word	0x20000054

08000ffc <timerRun2>:

void timerRun2(){
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
	if(timer2_counter > 0){
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <timerRun2+0x2c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	dd0b      	ble.n	8001020 <timerRun2+0x24>
		timer2_counter-- ;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <timerRun2+0x2c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3b01      	subs	r3, #1
 800100e:	4a06      	ldr	r2, [pc, #24]	; (8001028 <timerRun2+0x2c>)
 8001010:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0 ){
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <timerRun2+0x2c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	dc02      	bgt.n	8001020 <timerRun2+0x24>
			timer2_flag = 1;
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <timerRun2+0x30>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	20000058 	.word	0x20000058
 800102c:	2000005c 	.word	0x2000005c

08001030 <setTimer3>:

int timer4_counter = 0 ;
int timer4_flag = 0 ;


void setTimer3(int duration){
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	timer3_counter = duration ;
 8001038:	4a05      	ldr	r2, [pc, #20]	; (8001050 <setTimer3+0x20>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0 ;
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <setTimer3+0x24>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
	}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000060 	.word	0x20000060
 8001054:	20000064 	.word	0x20000064

08001058 <timerRun3>:



void timerRun3(){
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
	if(timer3_counter > 0){
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <timerRun3+0x2c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	dd0b      	ble.n	800107c <timerRun3+0x24>
		timer3_counter-- ;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <timerRun3+0x2c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	3b01      	subs	r3, #1
 800106a:	4a06      	ldr	r2, [pc, #24]	; (8001084 <timerRun3+0x2c>)
 800106c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0 ){
 800106e:	4b05      	ldr	r3, [pc, #20]	; (8001084 <timerRun3+0x2c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	dc02      	bgt.n	800107c <timerRun3+0x24>
			timer3_flag = 1;
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <timerRun3+0x30>)
 8001078:	2201      	movs	r2, #1
 800107a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	20000060 	.word	0x20000060
 8001088:	20000064 	.word	0x20000064

0800108c <setTimer4>:

void setTimer4(int duration){
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	timer4_counter = duration ;
 8001094:	4a05      	ldr	r2, [pc, #20]	; (80010ac <setTimer4+0x20>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]
	timer4_flag = 0 ;
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <setTimer4+0x24>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
	}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000068 	.word	0x20000068
 80010b0:	2000006c 	.word	0x2000006c

080010b4 <timerRun4>:



void timerRun4(){
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
	if(timer4_counter > 0){
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <timerRun4+0x2c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	dd0b      	ble.n	80010d8 <timerRun4+0x24>
		timer4_counter-- ;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <timerRun4+0x2c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <timerRun4+0x2c>)
 80010c8:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0 ){
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <timerRun4+0x2c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	dc02      	bgt.n	80010d8 <timerRun4+0x24>
			timer4_flag = 1;
 80010d2:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <timerRun4+0x30>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	20000068 	.word	0x20000068
 80010e4:	2000006c 	.word	0x2000006c

080010e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <HAL_MspInit+0x5c>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4a14      	ldr	r2, [pc, #80]	; (8001144 <HAL_MspInit+0x5c>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6193      	str	r3, [r2, #24]
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_MspInit+0x5c>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <HAL_MspInit+0x5c>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	4a0e      	ldr	r2, [pc, #56]	; (8001144 <HAL_MspInit+0x5c>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	61d3      	str	r3, [r2, #28]
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <HAL_MspInit+0x5c>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_MspInit+0x60>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <HAL_MspInit+0x60>)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	40021000 	.word	0x40021000
 8001148:	40010000 	.word	0x40010000

0800114c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800115c:	d113      	bne.n	8001186 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <HAL_TIM_Base_MspInit+0x44>)
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <HAL_TIM_Base_MspInit+0x44>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	61d3      	str	r3, [r2, #28]
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_TIM_Base_MspInit+0x44>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	201c      	movs	r0, #28
 800117c:	f000 fa2d 	bl	80015da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001180:	201c      	movs	r0, #28
 8001182:	f000 fa46 	bl	8001612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <NMI_Handler+0x4>

0800119a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <HardFault_Handler+0x4>

080011a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <MemManage_Handler+0x4>

080011a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <BusFault_Handler+0x4>

080011ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <UsageFault_Handler+0x4>

080011b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr

080011ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr

080011d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011da:	f000 f90b 	bl	80013f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <TIM2_IRQHandler+0x10>)
 80011ea:	f001 f85b 	bl	80022a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000070 	.word	0x20000070

080011f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <setTrafficLight>:
 *      Author: Khanh Ton
 */

#include "traffic_light.h"

void setTrafficLight(){
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0

	switch(status){
 8001208:	4b42      	ldr	r3, [pc, #264]	; (8001314 <setTrafficLight+0x110>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	3b02      	subs	r3, #2
 800120e:	2b0c      	cmp	r3, #12
 8001210:	d87c      	bhi.n	800130c <setTrafficLight+0x108>
 8001212:	a201      	add	r2, pc, #4	; (adr r2, 8001218 <setTrafficLight+0x14>)
 8001214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001218:	0800124d 	.word	0x0800124d
 800121c:	0800126d 	.word	0x0800126d
 8001220:	0800128d 	.word	0x0800128d
 8001224:	0800130d 	.word	0x0800130d
 8001228:	0800130d 	.word	0x0800130d
 800122c:	0800130d 	.word	0x0800130d
 8001230:	0800130d 	.word	0x0800130d
 8001234:	0800130d 	.word	0x0800130d
 8001238:	0800130d 	.word	0x0800130d
 800123c:	0800130d 	.word	0x0800130d
 8001240:	080012ad 	.word	0x080012ad
 8001244:	080012ed 	.word	0x080012ed
 8001248:	080012cd 	.word	0x080012cd

	case AUTO_RED:
		HAL_GPIO_WritePin(LED_RED_GPIO_Port   , LED_RED_Pin   , RESET) ;
 800124c:	2200      	movs	r2, #0
 800124e:	2120      	movs	r1, #32
 8001250:	4831      	ldr	r0, [pc, #196]	; (8001318 <setTrafficLight+0x114>)
 8001252:	f000 fb8a 	bl	800196a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port , LED_GREEN_Pin ,   SET) ;
 8001256:	2201      	movs	r2, #1
 8001258:	2180      	movs	r1, #128	; 0x80
 800125a:	482f      	ldr	r0, [pc, #188]	; (8001318 <setTrafficLight+0x114>)
 800125c:	f000 fb85 	bl	800196a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin,   SET) ;
 8001260:	2201      	movs	r2, #1
 8001262:	2140      	movs	r1, #64	; 0x40
 8001264:	482c      	ldr	r0, [pc, #176]	; (8001318 <setTrafficLight+0x114>)
 8001266:	f000 fb80 	bl	800196a <HAL_GPIO_WritePin>
		break ;
 800126a:	e050      	b.n	800130e <setTrafficLight+0x10a>

	case AUTO_GREEN:
		HAL_GPIO_WritePin(LED_RED_GPIO_Port , LED_RED_Pin       ,  SET) ;
 800126c:	2201      	movs	r2, #1
 800126e:	2120      	movs	r1, #32
 8001270:	4829      	ldr	r0, [pc, #164]	; (8001318 <setTrafficLight+0x114>)
 8001272:	f000 fb7a 	bl	800196a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port , LED_GREEN_Pin   ,RESET) ;
 8001276:	2200      	movs	r2, #0
 8001278:	2180      	movs	r1, #128	; 0x80
 800127a:	4827      	ldr	r0, [pc, #156]	; (8001318 <setTrafficLight+0x114>)
 800127c:	f000 fb75 	bl	800196a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port , LED_YELLOW_Pin ,  SET) ;
 8001280:	2201      	movs	r2, #1
 8001282:	2140      	movs	r1, #64	; 0x40
 8001284:	4824      	ldr	r0, [pc, #144]	; (8001318 <setTrafficLight+0x114>)
 8001286:	f000 fb70 	bl	800196a <HAL_GPIO_WritePin>
		break ;
 800128a:	e040      	b.n	800130e <setTrafficLight+0x10a>

	case AUTO_YELLOW:
		HAL_GPIO_WritePin(LED_RED_GPIO_Port   , LED_RED_Pin     , SET)  ;
 800128c:	2201      	movs	r2, #1
 800128e:	2120      	movs	r1, #32
 8001290:	4821      	ldr	r0, [pc, #132]	; (8001318 <setTrafficLight+0x114>)
 8001292:	f000 fb6a 	bl	800196a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port , LED_GREEN_Pin   , SET)  ;
 8001296:	2201      	movs	r2, #1
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	481f      	ldr	r0, [pc, #124]	; (8001318 <setTrafficLight+0x114>)
 800129c:	f000 fb65 	bl	800196a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port , LED_YELLOW_Pin , RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2140      	movs	r1, #64	; 0x40
 80012a4:	481c      	ldr	r0, [pc, #112]	; (8001318 <setTrafficLight+0x114>)
 80012a6:	f000 fb60 	bl	800196a <HAL_GPIO_WritePin>
		break ;
 80012aa:	e030      	b.n	800130e <setTrafficLight+0x10a>

	case MAN_RED:
		HAL_GPIO_WritePin(LED_RED_GPIO_Port   , LED_RED_Pin   , RESET) ;
 80012ac:	2200      	movs	r2, #0
 80012ae:	2120      	movs	r1, #32
 80012b0:	4819      	ldr	r0, [pc, #100]	; (8001318 <setTrafficLight+0x114>)
 80012b2:	f000 fb5a 	bl	800196a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port , LED_GREEN_Pin ,   SET) ;
 80012b6:	2201      	movs	r2, #1
 80012b8:	2180      	movs	r1, #128	; 0x80
 80012ba:	4817      	ldr	r0, [pc, #92]	; (8001318 <setTrafficLight+0x114>)
 80012bc:	f000 fb55 	bl	800196a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin,   SET) ;
 80012c0:	2201      	movs	r2, #1
 80012c2:	2140      	movs	r1, #64	; 0x40
 80012c4:	4814      	ldr	r0, [pc, #80]	; (8001318 <setTrafficLight+0x114>)
 80012c6:	f000 fb50 	bl	800196a <HAL_GPIO_WritePin>

		break ;
 80012ca:	e020      	b.n	800130e <setTrafficLight+0x10a>

	case MAN_GREEN:
		HAL_GPIO_WritePin(LED_RED_GPIO_Port , LED_RED_Pin       ,  SET) ;
 80012cc:	2201      	movs	r2, #1
 80012ce:	2120      	movs	r1, #32
 80012d0:	4811      	ldr	r0, [pc, #68]	; (8001318 <setTrafficLight+0x114>)
 80012d2:	f000 fb4a 	bl	800196a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port , LED_GREEN_Pin   ,RESET) ;
 80012d6:	2200      	movs	r2, #0
 80012d8:	2180      	movs	r1, #128	; 0x80
 80012da:	480f      	ldr	r0, [pc, #60]	; (8001318 <setTrafficLight+0x114>)
 80012dc:	f000 fb45 	bl	800196a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port , LED_YELLOW_Pin ,  SET) ;
 80012e0:	2201      	movs	r2, #1
 80012e2:	2140      	movs	r1, #64	; 0x40
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <setTrafficLight+0x114>)
 80012e6:	f000 fb40 	bl	800196a <HAL_GPIO_WritePin>
		break ;
 80012ea:	e010      	b.n	800130e <setTrafficLight+0x10a>

	case MAN_YELLOW:
		HAL_GPIO_WritePin(LED_RED_GPIO_Port   , LED_RED_Pin     , SET)  ;
 80012ec:	2201      	movs	r2, #1
 80012ee:	2120      	movs	r1, #32
 80012f0:	4809      	ldr	r0, [pc, #36]	; (8001318 <setTrafficLight+0x114>)
 80012f2:	f000 fb3a 	bl	800196a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port , LED_GREEN_Pin   , SET)  ;
 80012f6:	2201      	movs	r2, #1
 80012f8:	2180      	movs	r1, #128	; 0x80
 80012fa:	4807      	ldr	r0, [pc, #28]	; (8001318 <setTrafficLight+0x114>)
 80012fc:	f000 fb35 	bl	800196a <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port , LED_YELLOW_Pin , RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	2140      	movs	r1, #64	; 0x40
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <setTrafficLight+0x114>)
 8001306:	f000 fb30 	bl	800196a <HAL_GPIO_WritePin>
		break ;
 800130a:	e000      	b.n	800130e <setTrafficLight+0x10a>

	default:
		break ;
 800130c:	bf00      	nop

	}
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000004c 	.word	0x2000004c
 8001318:	40010800 	.word	0x40010800

0800131c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800131c:	480c      	ldr	r0, [pc, #48]	; (8001350 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800131e:	490d      	ldr	r1, [pc, #52]	; (8001354 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001320:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001324:	e002      	b.n	800132c <LoopCopyDataInit>

08001326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132a:	3304      	adds	r3, #4

0800132c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800132c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001330:	d3f9      	bcc.n	8001326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001332:	4a0a      	ldr	r2, [pc, #40]	; (800135c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001334:	4c0a      	ldr	r4, [pc, #40]	; (8001360 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001338:	e001      	b.n	800133e <LoopFillZerobss>

0800133a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800133c:	3204      	adds	r2, #4

0800133e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001340:	d3fb      	bcc.n	800133a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001342:	f7ff ff59 	bl	80011f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001346:	f001 faf5 	bl	8002934 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800134a:	f7ff f85b 	bl	8000404 <main>
  bx lr
 800134e:	4770      	bx	lr
  ldr r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001354:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001358:	080029cc 	.word	0x080029cc
  ldr r2, =_sbss
 800135c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001360:	200000bc 	.word	0x200000bc

08001364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001364:	e7fe      	b.n	8001364 <ADC1_2_IRQHandler>
	...

08001368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <HAL_Init+0x28>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a07      	ldr	r2, [pc, #28]	; (8001390 <HAL_Init+0x28>)
 8001372:	f043 0310 	orr.w	r3, r3, #16
 8001376:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001378:	2003      	movs	r0, #3
 800137a:	f000 f923 	bl	80015c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800137e:	200f      	movs	r0, #15
 8001380:	f000 f808 	bl	8001394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001384:	f7ff feb0 	bl	80010e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40022000 	.word	0x40022000

08001394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_InitTick+0x54>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_InitTick+0x58>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f93b 	bl	800162e <HAL_SYSTICK_Config>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e00e      	b.n	80013e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d80a      	bhi.n	80013de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f000 f903 	bl	80015da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <HAL_InitTick+0x5c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000020 	.word	0x20000020
 80013ec:	20000028 	.word	0x20000028
 80013f0:	20000024 	.word	0x20000024

080013f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_IncTick+0x1c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_IncTick+0x20>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4413      	add	r3, r2
 8001404:	4a03      	ldr	r2, [pc, #12]	; (8001414 <HAL_IncTick+0x20>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	20000028 	.word	0x20000028
 8001414:	200000b8 	.word	0x200000b8

08001418 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b02      	ldr	r3, [pc, #8]	; (8001428 <HAL_GetTick+0x10>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	200000b8 	.word	0x200000b8

0800142c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001448:	4013      	ands	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145e:	4a04      	ldr	r2, [pc, #16]	; (8001470 <__NVIC_SetPriorityGrouping+0x44>)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	60d3      	str	r3, [r2, #12]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <__NVIC_GetPriorityGrouping+0x18>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	f003 0307 	and.w	r3, r3, #7
}
 8001482:	4618      	mov	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	db0b      	blt.n	80014ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	f003 021f 	and.w	r2, r3, #31
 80014a8:	4906      	ldr	r1, [pc, #24]	; (80014c4 <__NVIC_EnableIRQ+0x34>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	095b      	lsrs	r3, r3, #5
 80014b0:	2001      	movs	r0, #1
 80014b2:	fa00 f202 	lsl.w	r2, r0, r2
 80014b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	e000e100 	.word	0xe000e100

080014c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	db0a      	blt.n	80014f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	490c      	ldr	r1, [pc, #48]	; (8001514 <__NVIC_SetPriority+0x4c>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	0112      	lsls	r2, r2, #4
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	440b      	add	r3, r1
 80014ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f0:	e00a      	b.n	8001508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4908      	ldr	r1, [pc, #32]	; (8001518 <__NVIC_SetPriority+0x50>)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	3b04      	subs	r3, #4
 8001500:	0112      	lsls	r2, r2, #4
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	440b      	add	r3, r1
 8001506:	761a      	strb	r2, [r3, #24]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151c:	b480      	push	{r7}
 800151e:	b089      	sub	sp, #36	; 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f1c3 0307 	rsb	r3, r3, #7
 8001536:	2b04      	cmp	r3, #4
 8001538:	bf28      	it	cs
 800153a:	2304      	movcs	r3, #4
 800153c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3304      	adds	r3, #4
 8001542:	2b06      	cmp	r3, #6
 8001544:	d902      	bls.n	800154c <NVIC_EncodePriority+0x30>
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3b03      	subs	r3, #3
 800154a:	e000      	b.n	800154e <NVIC_EncodePriority+0x32>
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	f04f 32ff 	mov.w	r2, #4294967295
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43da      	mvns	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001564:	f04f 31ff 	mov.w	r1, #4294967295
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43d9      	mvns	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	4313      	orrs	r3, r2
         );
}
 8001576:	4618      	mov	r0, r3
 8001578:	3724      	adds	r7, #36	; 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001590:	d301      	bcc.n	8001596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001592:	2301      	movs	r3, #1
 8001594:	e00f      	b.n	80015b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <SysTick_Config+0x40>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159e:	210f      	movs	r1, #15
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	f7ff ff90 	bl	80014c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <SysTick_Config+0x40>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <SysTick_Config+0x40>)
 80015b0:	2207      	movs	r2, #7
 80015b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	e000e010 	.word	0xe000e010

080015c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ff2d 	bl	800142c <__NVIC_SetPriorityGrouping>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
 80015e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ec:	f7ff ff42 	bl	8001474 <__NVIC_GetPriorityGrouping>
 80015f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	6978      	ldr	r0, [r7, #20]
 80015f8:	f7ff ff90 	bl	800151c <NVIC_EncodePriority>
 80015fc:	4602      	mov	r2, r0
 80015fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff5f 	bl	80014c8 <__NVIC_SetPriority>
}
 800160a:	bf00      	nop
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff35 	bl	8001490 <__NVIC_EnableIRQ>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ffa2 	bl	8001580 <SysTick_Config>
 800163c:	4603      	mov	r3, r0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001648:	b480      	push	{r7}
 800164a:	b08b      	sub	sp, #44	; 0x2c
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165a:	e148      	b.n	80018ee <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800165c:	2201      	movs	r2, #1
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	4013      	ands	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	429a      	cmp	r2, r3
 8001676:	f040 8137 	bne.w	80018e8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4aa3      	ldr	r2, [pc, #652]	; (800190c <HAL_GPIO_Init+0x2c4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d05e      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
 8001684:	4aa1      	ldr	r2, [pc, #644]	; (800190c <HAL_GPIO_Init+0x2c4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d875      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 800168a:	4aa1      	ldr	r2, [pc, #644]	; (8001910 <HAL_GPIO_Init+0x2c8>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d058      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
 8001690:	4a9f      	ldr	r2, [pc, #636]	; (8001910 <HAL_GPIO_Init+0x2c8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d86f      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 8001696:	4a9f      	ldr	r2, [pc, #636]	; (8001914 <HAL_GPIO_Init+0x2cc>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d052      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
 800169c:	4a9d      	ldr	r2, [pc, #628]	; (8001914 <HAL_GPIO_Init+0x2cc>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d869      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 80016a2:	4a9d      	ldr	r2, [pc, #628]	; (8001918 <HAL_GPIO_Init+0x2d0>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d04c      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
 80016a8:	4a9b      	ldr	r2, [pc, #620]	; (8001918 <HAL_GPIO_Init+0x2d0>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d863      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 80016ae:	4a9b      	ldr	r2, [pc, #620]	; (800191c <HAL_GPIO_Init+0x2d4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d046      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
 80016b4:	4a99      	ldr	r2, [pc, #612]	; (800191c <HAL_GPIO_Init+0x2d4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d85d      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 80016ba:	2b12      	cmp	r3, #18
 80016bc:	d82a      	bhi.n	8001714 <HAL_GPIO_Init+0xcc>
 80016be:	2b12      	cmp	r3, #18
 80016c0:	d859      	bhi.n	8001776 <HAL_GPIO_Init+0x12e>
 80016c2:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <HAL_GPIO_Init+0x80>)
 80016c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c8:	08001743 	.word	0x08001743
 80016cc:	0800171d 	.word	0x0800171d
 80016d0:	0800172f 	.word	0x0800172f
 80016d4:	08001771 	.word	0x08001771
 80016d8:	08001777 	.word	0x08001777
 80016dc:	08001777 	.word	0x08001777
 80016e0:	08001777 	.word	0x08001777
 80016e4:	08001777 	.word	0x08001777
 80016e8:	08001777 	.word	0x08001777
 80016ec:	08001777 	.word	0x08001777
 80016f0:	08001777 	.word	0x08001777
 80016f4:	08001777 	.word	0x08001777
 80016f8:	08001777 	.word	0x08001777
 80016fc:	08001777 	.word	0x08001777
 8001700:	08001777 	.word	0x08001777
 8001704:	08001777 	.word	0x08001777
 8001708:	08001777 	.word	0x08001777
 800170c:	08001725 	.word	0x08001725
 8001710:	08001739 	.word	0x08001739
 8001714:	4a82      	ldr	r2, [pc, #520]	; (8001920 <HAL_GPIO_Init+0x2d8>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800171a:	e02c      	b.n	8001776 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	623b      	str	r3, [r7, #32]
          break;
 8001722:	e029      	b.n	8001778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	3304      	adds	r3, #4
 800172a:	623b      	str	r3, [r7, #32]
          break;
 800172c:	e024      	b.n	8001778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	3308      	adds	r3, #8
 8001734:	623b      	str	r3, [r7, #32]
          break;
 8001736:	e01f      	b.n	8001778 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	330c      	adds	r3, #12
 800173e:	623b      	str	r3, [r7, #32]
          break;
 8001740:	e01a      	b.n	8001778 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800174a:	2304      	movs	r3, #4
 800174c:	623b      	str	r3, [r7, #32]
          break;
 800174e:	e013      	b.n	8001778 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d105      	bne.n	8001764 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001758:	2308      	movs	r3, #8
 800175a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	611a      	str	r2, [r3, #16]
          break;
 8001762:	e009      	b.n	8001778 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001764:	2308      	movs	r3, #8
 8001766:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	615a      	str	r2, [r3, #20]
          break;
 800176e:	e003      	b.n	8001778 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
          break;
 8001774:	e000      	b.n	8001778 <HAL_GPIO_Init+0x130>
          break;
 8001776:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2bff      	cmp	r3, #255	; 0xff
 800177c:	d801      	bhi.n	8001782 <HAL_GPIO_Init+0x13a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	e001      	b.n	8001786 <HAL_GPIO_Init+0x13e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3304      	adds	r3, #4
 8001786:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2bff      	cmp	r3, #255	; 0xff
 800178c:	d802      	bhi.n	8001794 <HAL_GPIO_Init+0x14c>
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	e002      	b.n	800179a <HAL_GPIO_Init+0x152>
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	3b08      	subs	r3, #8
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	210f      	movs	r1, #15
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	401a      	ands	r2, r3
 80017ac:	6a39      	ldr	r1, [r7, #32]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	431a      	orrs	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 8090 	beq.w	80018e8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017c8:	4b56      	ldr	r3, [pc, #344]	; (8001924 <HAL_GPIO_Init+0x2dc>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a55      	ldr	r2, [pc, #340]	; (8001924 <HAL_GPIO_Init+0x2dc>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	6193      	str	r3, [r2, #24]
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_GPIO_Init+0x2dc>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017e0:	4a51      	ldr	r2, [pc, #324]	; (8001928 <HAL_GPIO_Init+0x2e0>)
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	3302      	adds	r3, #2
 80017e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	220f      	movs	r2, #15
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	4013      	ands	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a49      	ldr	r2, [pc, #292]	; (800192c <HAL_GPIO_Init+0x2e4>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d00d      	beq.n	8001828 <HAL_GPIO_Init+0x1e0>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a48      	ldr	r2, [pc, #288]	; (8001930 <HAL_GPIO_Init+0x2e8>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d007      	beq.n	8001824 <HAL_GPIO_Init+0x1dc>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a47      	ldr	r2, [pc, #284]	; (8001934 <HAL_GPIO_Init+0x2ec>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d101      	bne.n	8001820 <HAL_GPIO_Init+0x1d8>
 800181c:	2302      	movs	r3, #2
 800181e:	e004      	b.n	800182a <HAL_GPIO_Init+0x1e2>
 8001820:	2303      	movs	r3, #3
 8001822:	e002      	b.n	800182a <HAL_GPIO_Init+0x1e2>
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_GPIO_Init+0x1e2>
 8001828:	2300      	movs	r3, #0
 800182a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182c:	f002 0203 	and.w	r2, r2, #3
 8001830:	0092      	lsls	r2, r2, #2
 8001832:	4093      	lsls	r3, r2
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800183a:	493b      	ldr	r1, [pc, #236]	; (8001928 <HAL_GPIO_Init+0x2e0>)
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	089b      	lsrs	r3, r3, #2
 8001840:	3302      	adds	r3, #2
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d006      	beq.n	8001862 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001854:	4b38      	ldr	r3, [pc, #224]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4937      	ldr	r1, [pc, #220]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]
 8001860:	e006      	b.n	8001870 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001862:	4b35      	ldr	r3, [pc, #212]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	43db      	mvns	r3, r3
 800186a:	4933      	ldr	r1, [pc, #204]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 800186c:	4013      	ands	r3, r2
 800186e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800187c:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	492d      	ldr	r1, [pc, #180]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
 8001888:	e006      	b.n	8001898 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800188a:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	43db      	mvns	r3, r3
 8001892:	4929      	ldr	r1, [pc, #164]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 8001894:	4013      	ands	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	4923      	ldr	r1, [pc, #140]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	608b      	str	r3, [r1, #8]
 80018b0:	e006      	b.n	80018c0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	491f      	ldr	r1, [pc, #124]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 80018bc:	4013      	ands	r3, r2
 80018be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d006      	beq.n	80018da <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018cc:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	4919      	ldr	r1, [pc, #100]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	60cb      	str	r3, [r1, #12]
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	4915      	ldr	r1, [pc, #84]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	3301      	adds	r3, #1
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	fa22 f303 	lsr.w	r3, r2, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f47f aeaf 	bne.w	800165c <HAL_GPIO_Init+0x14>
  }
}
 80018fe:	bf00      	nop
 8001900:	bf00      	nop
 8001902:	372c      	adds	r7, #44	; 0x2c
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	10320000 	.word	0x10320000
 8001910:	10310000 	.word	0x10310000
 8001914:	10220000 	.word	0x10220000
 8001918:	10210000 	.word	0x10210000
 800191c:	10120000 	.word	0x10120000
 8001920:	10110000 	.word	0x10110000
 8001924:	40021000 	.word	0x40021000
 8001928:	40010000 	.word	0x40010000
 800192c:	40010800 	.word	0x40010800
 8001930:	40010c00 	.word	0x40010c00
 8001934:	40011000 	.word	0x40011000
 8001938:	40010400 	.word	0x40010400

0800193c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	887b      	ldrh	r3, [r7, #2]
 800194e:	4013      	ands	r3, r2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d002      	beq.n	800195a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001954:	2301      	movs	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
 8001958:	e001      	b.n	800195e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800195e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr

0800196a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	460b      	mov	r3, r1
 8001974:	807b      	strh	r3, [r7, #2]
 8001976:	4613      	mov	r3, r2
 8001978:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800197a:	787b      	ldrb	r3, [r7, #1]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001980:	887a      	ldrh	r2, [r7, #2]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001986:	e003      	b.n	8001990 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	041a      	lsls	r2, r3, #16
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	611a      	str	r2, [r3, #16]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
	...

0800199c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e26c      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8087 	beq.w	8001aca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019bc:	4b92      	ldr	r3, [pc, #584]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d00c      	beq.n	80019e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019c8:	4b8f      	ldr	r3, [pc, #572]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d112      	bne.n	80019fa <HAL_RCC_OscConfig+0x5e>
 80019d4:	4b8c      	ldr	r3, [pc, #560]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e0:	d10b      	bne.n	80019fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e2:	4b89      	ldr	r3, [pc, #548]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d06c      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x12c>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d168      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e246      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a02:	d106      	bne.n	8001a12 <HAL_RCC_OscConfig+0x76>
 8001a04:	4b80      	ldr	r3, [pc, #512]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a7f      	ldr	r2, [pc, #508]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	e02e      	b.n	8001a70 <HAL_RCC_OscConfig+0xd4>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x98>
 8001a1a:	4b7b      	ldr	r3, [pc, #492]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a7a      	ldr	r2, [pc, #488]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	4b78      	ldr	r3, [pc, #480]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a77      	ldr	r2, [pc, #476]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e01d      	b.n	8001a70 <HAL_RCC_OscConfig+0xd4>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0xbc>
 8001a3e:	4b72      	ldr	r3, [pc, #456]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a71      	ldr	r2, [pc, #452]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b6f      	ldr	r3, [pc, #444]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a6e      	ldr	r2, [pc, #440]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e00b      	b.n	8001a70 <HAL_RCC_OscConfig+0xd4>
 8001a58:	4b6b      	ldr	r3, [pc, #428]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a6a      	ldr	r2, [pc, #424]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b68      	ldr	r3, [pc, #416]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a67      	ldr	r2, [pc, #412]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d013      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff fcce 	bl	8001418 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff fcca 	bl	8001418 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e1fa      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	4b5d      	ldr	r3, [pc, #372]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0xe4>
 8001a9e:	e014      	b.n	8001aca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fcba 	bl	8001418 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fcb6 	bl	8001418 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e1e6      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aba:	4b53      	ldr	r3, [pc, #332]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x10c>
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d063      	beq.n	8001b9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad6:	4b4c      	ldr	r3, [pc, #304]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00b      	beq.n	8001afa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ae2:	4b49      	ldr	r3, [pc, #292]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d11c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x18c>
 8001aee:	4b46      	ldr	r3, [pc, #280]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d116      	bne.n	8001b28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afa:	4b43      	ldr	r3, [pc, #268]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_RCC_OscConfig+0x176>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e1ba      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b12:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4939      	ldr	r1, [pc, #228]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b26:	e03a      	b.n	8001b9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d020      	beq.n	8001b72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b30:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7ff fc6f 	bl	8001418 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3e:	f7ff fc6b 	bl	8001418 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e19b      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b50:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5c:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4927      	ldr	r1, [pc, #156]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]
 8001b70:	e015      	b.n	8001b9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b72:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <HAL_RCC_OscConfig+0x270>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff fc4e 	bl	8001418 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b80:	f7ff fc4a 	bl	8001418 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e17a      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b92:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d03a      	beq.n	8001c20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d019      	beq.n	8001be6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_RCC_OscConfig+0x274>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb8:	f7ff fc2e 	bl	8001418 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc0:	f7ff fc2a 	bl	8001418 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e15a      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bde:	2001      	movs	r0, #1
 8001be0:	f000 faa6 	bl	8002130 <RCC_Delay>
 8001be4:	e01c      	b.n	8001c20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_RCC_OscConfig+0x274>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bec:	f7ff fc14 	bl	8001418 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf2:	e00f      	b.n	8001c14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf4:	f7ff fc10 	bl	8001418 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d908      	bls.n	8001c14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e140      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	42420000 	.word	0x42420000
 8001c10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c14:	4b9e      	ldr	r3, [pc, #632]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1e9      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 80a6 	beq.w	8001d7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c32:	4b97      	ldr	r3, [pc, #604]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10d      	bne.n	8001c5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	4b94      	ldr	r3, [pc, #592]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	4a93      	ldr	r2, [pc, #588]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c48:	61d3      	str	r3, [r2, #28]
 8001c4a:	4b91      	ldr	r3, [pc, #580]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c56:	2301      	movs	r3, #1
 8001c58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5a:	4b8e      	ldr	r3, [pc, #568]	; (8001e94 <HAL_RCC_OscConfig+0x4f8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d118      	bne.n	8001c98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c66:	4b8b      	ldr	r3, [pc, #556]	; (8001e94 <HAL_RCC_OscConfig+0x4f8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a8a      	ldr	r2, [pc, #552]	; (8001e94 <HAL_RCC_OscConfig+0x4f8>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c72:	f7ff fbd1 	bl	8001418 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7a:	f7ff fbcd 	bl	8001418 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b64      	cmp	r3, #100	; 0x64
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e0fd      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8c:	4b81      	ldr	r3, [pc, #516]	; (8001e94 <HAL_RCC_OscConfig+0x4f8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d106      	bne.n	8001cae <HAL_RCC_OscConfig+0x312>
 8001ca0:	4b7b      	ldr	r3, [pc, #492]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	4a7a      	ldr	r2, [pc, #488]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6213      	str	r3, [r2, #32]
 8001cac:	e02d      	b.n	8001d0a <HAL_RCC_OscConfig+0x36e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x334>
 8001cb6:	4b76      	ldr	r3, [pc, #472]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	4a75      	ldr	r2, [pc, #468]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	6213      	str	r3, [r2, #32]
 8001cc2:	4b73      	ldr	r3, [pc, #460]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	4a72      	ldr	r2, [pc, #456]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	f023 0304 	bic.w	r3, r3, #4
 8001ccc:	6213      	str	r3, [r2, #32]
 8001cce:	e01c      	b.n	8001d0a <HAL_RCC_OscConfig+0x36e>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d10c      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x356>
 8001cd8:	4b6d      	ldr	r3, [pc, #436]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4a6c      	ldr	r2, [pc, #432]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6213      	str	r3, [r2, #32]
 8001ce4:	4b6a      	ldr	r3, [pc, #424]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4a69      	ldr	r2, [pc, #420]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6213      	str	r3, [r2, #32]
 8001cf0:	e00b      	b.n	8001d0a <HAL_RCC_OscConfig+0x36e>
 8001cf2:	4b67      	ldr	r3, [pc, #412]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	4a66      	ldr	r2, [pc, #408]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	6213      	str	r3, [r2, #32]
 8001cfe:	4b64      	ldr	r3, [pc, #400]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	4a63      	ldr	r2, [pc, #396]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d04:	f023 0304 	bic.w	r3, r3, #4
 8001d08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d015      	beq.n	8001d3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d12:	f7ff fb81 	bl	8001418 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	e00a      	b.n	8001d30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1a:	f7ff fb7d 	bl	8001418 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0ab      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d30:	4b57      	ldr	r3, [pc, #348]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0ee      	beq.n	8001d1a <HAL_RCC_OscConfig+0x37e>
 8001d3c:	e014      	b.n	8001d68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff fb6b 	bl	8001418 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d44:	e00a      	b.n	8001d5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7ff fb67 	bl	8001418 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e095      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5c:	4b4c      	ldr	r3, [pc, #304]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1ee      	bne.n	8001d46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d68:	7dfb      	ldrb	r3, [r7, #23]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d105      	bne.n	8001d7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6e:	4b48      	ldr	r3, [pc, #288]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	4a47      	ldr	r2, [pc, #284]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8081 	beq.w	8001e86 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d84:	4b42      	ldr	r3, [pc, #264]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 030c 	and.w	r3, r3, #12
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d061      	beq.n	8001e54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d146      	bne.n	8001e26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d98:	4b3f      	ldr	r3, [pc, #252]	; (8001e98 <HAL_RCC_OscConfig+0x4fc>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7ff fb3b 	bl	8001418 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da6:	f7ff fb37 	bl	8001418 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e067      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db8:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f0      	bne.n	8001da6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dcc:	d108      	bne.n	8001de0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dce:	4b30      	ldr	r3, [pc, #192]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	492d      	ldr	r1, [pc, #180]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de0:	4b2b      	ldr	r3, [pc, #172]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a19      	ldr	r1, [r3, #32]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	430b      	orrs	r3, r1
 8001df2:	4927      	ldr	r1, [pc, #156]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df8:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <HAL_RCC_OscConfig+0x4fc>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfe:	f7ff fb0b 	bl	8001418 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e06:	f7ff fb07 	bl	8001418 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e037      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e18:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x46a>
 8001e24:	e02f      	b.n	8001e86 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e26:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <HAL_RCC_OscConfig+0x4fc>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff faf4 	bl	8001418 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e34:	f7ff faf0 	bl	8001418 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e020      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x498>
 8001e52:	e018      	b.n	8001e86 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e013      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d106      	bne.n	8001e82 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d001      	beq.n	8001e86 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40007000 	.word	0x40007000
 8001e98:	42420060 	.word	0x42420060

08001e9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0d0      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b6a      	ldr	r3, [pc, #424]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d910      	bls.n	8001ee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b67      	ldr	r3, [pc, #412]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 0207 	bic.w	r2, r3, #7
 8001ec6:	4965      	ldr	r1, [pc, #404]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	4b63      	ldr	r3, [pc, #396]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0b8      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d020      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef8:	4b59      	ldr	r3, [pc, #356]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4a58      	ldr	r2, [pc, #352]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f10:	4b53      	ldr	r3, [pc, #332]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	4a52      	ldr	r2, [pc, #328]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f1c:	4b50      	ldr	r3, [pc, #320]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	494d      	ldr	r1, [pc, #308]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d040      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	4b47      	ldr	r3, [pc, #284]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d115      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e07f      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5a:	4b41      	ldr	r3, [pc, #260]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e073      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6a:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e06b      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f7a:	4b39      	ldr	r3, [pc, #228]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f023 0203 	bic.w	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4936      	ldr	r1, [pc, #216]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f8c:	f7ff fa44 	bl	8001418 <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f94:	f7ff fa40 	bl	8001418 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e053      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 020c 	and.w	r2, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d1eb      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d210      	bcs.n	8001fec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b24      	ldr	r3, [pc, #144]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 0207 	bic.w	r2, r3, #7
 8001fd2:	4922      	ldr	r1, [pc, #136]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e032      	b.n	8002052 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff8:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	4916      	ldr	r1, [pc, #88]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	4313      	orrs	r3, r2
 8002008:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d009      	beq.n	800202a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002016:	4b12      	ldr	r3, [pc, #72]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	490e      	ldr	r1, [pc, #56]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	4313      	orrs	r3, r2
 8002028:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800202a:	f000 f821 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 800202e:	4602      	mov	r2, r0
 8002030:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	490a      	ldr	r1, [pc, #40]	; (8002064 <HAL_RCC_ClockConfig+0x1c8>)
 800203c:	5ccb      	ldrb	r3, [r1, r3]
 800203e:	fa22 f303 	lsr.w	r3, r2, r3
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <HAL_RCC_ClockConfig+0x1cc>)
 8002044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_RCC_ClockConfig+0x1d0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff f9a2 	bl	8001394 <HAL_InitTick>

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40022000 	.word	0x40022000
 8002060:	40021000 	.word	0x40021000
 8002064:	080029b4 	.word	0x080029b4
 8002068:	20000020 	.word	0x20000020
 800206c:	20000024 	.word	0x20000024

08002070 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002070:	b490      	push	{r4, r7}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002076:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002078:	1d3c      	adds	r4, r7, #4
 800207a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800207c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002080:	f240 2301 	movw	r3, #513	; 0x201
 8002084:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800209a:	4b22      	ldr	r3, [pc, #136]	; (8002124 <HAL_RCC_GetSysClockFreq+0xb4>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d002      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x40>
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_GetSysClockFreq+0x46>
 80020ae:	e02d      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020b2:	623b      	str	r3, [r7, #32]
      break;
 80020b4:	e02d      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	0c9b      	lsrs	r3, r3, #18
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020c2:	4413      	add	r3, r2
 80020c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d013      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020d4:	4b13      	ldr	r3, [pc, #76]	; (8002124 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	0c5b      	lsrs	r3, r3, #17
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020e2:	4413      	add	r3, r2
 80020e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ee:	fb02 f203 	mul.w	r2, r2, r3
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
 80020fa:	e004      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	4a0b      	ldr	r2, [pc, #44]	; (800212c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002100:	fb02 f303 	mul.w	r3, r2, r3
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	623b      	str	r3, [r7, #32]
      break;
 800210a:	e002      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_RCC_GetSysClockFreq+0xb8>)
 800210e:	623b      	str	r3, [r7, #32]
      break;
 8002110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002112:	6a3b      	ldr	r3, [r7, #32]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3728      	adds	r7, #40	; 0x28
 8002118:	46bd      	mov	sp, r7
 800211a:	bc90      	pop	{r4, r7}
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	080029a4 	.word	0x080029a4
 8002124:	40021000 	.word	0x40021000
 8002128:	007a1200 	.word	0x007a1200
 800212c:	003d0900 	.word	0x003d0900

08002130 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <RCC_Delay+0x34>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <RCC_Delay+0x38>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	0a5b      	lsrs	r3, r3, #9
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800214c:	bf00      	nop
  }
  while (Delay --);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1e5a      	subs	r2, r3, #1
 8002152:	60fa      	str	r2, [r7, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1f9      	bne.n	800214c <RCC_Delay+0x1c>
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	20000020 	.word	0x20000020
 8002168:	10624dd3 	.word	0x10624dd3

0800216c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e041      	b.n	8002202 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7fe ffda 	bl	800114c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3304      	adds	r3, #4
 80021a8:	4619      	mov	r1, r3
 80021aa:	4610      	mov	r0, r2
 80021ac:	f000 fa6a 	bl	8002684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b01      	cmp	r3, #1
 800221e:	d001      	beq.n	8002224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e035      	b.n	8002290 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2202      	movs	r2, #2
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68da      	ldr	r2, [r3, #12]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a16      	ldr	r2, [pc, #88]	; (800229c <HAL_TIM_Base_Start_IT+0x90>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d009      	beq.n	800225a <HAL_TIM_Base_Start_IT+0x4e>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800224e:	d004      	beq.n	800225a <HAL_TIM_Base_Start_IT+0x4e>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a12      	ldr	r2, [pc, #72]	; (80022a0 <HAL_TIM_Base_Start_IT+0x94>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d111      	bne.n	800227e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b06      	cmp	r3, #6
 800226a:	d010      	beq.n	800228e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800227c:	e007      	b.n	800228e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f042 0201 	orr.w	r2, r2, #1
 800228c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40012c00 	.word	0x40012c00
 80022a0:	40000400 	.word	0x40000400

080022a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d122      	bne.n	8002300 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d11b      	bne.n	8002300 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 0202 	mvn.w	r2, #2
 80022d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f9b1 	bl	800264e <HAL_TIM_IC_CaptureCallback>
 80022ec:	e005      	b.n	80022fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f9a4 	bl	800263c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f9b3 	bl	8002660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	2b04      	cmp	r3, #4
 800230c:	d122      	bne.n	8002354 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b04      	cmp	r3, #4
 800231a:	d11b      	bne.n	8002354 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 0204 	mvn.w	r2, #4
 8002324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2202      	movs	r2, #2
 800232a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f987 	bl	800264e <HAL_TIM_IC_CaptureCallback>
 8002340:	e005      	b.n	800234e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f97a 	bl	800263c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f989 	bl	8002660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b08      	cmp	r3, #8
 8002360:	d122      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b08      	cmp	r3, #8
 800236e:	d11b      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0208 	mvn.w	r2, #8
 8002378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2204      	movs	r2, #4
 800237e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f95d 	bl	800264e <HAL_TIM_IC_CaptureCallback>
 8002394:	e005      	b.n	80023a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f950 	bl	800263c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f95f 	bl	8002660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	2b10      	cmp	r3, #16
 80023b4:	d122      	bne.n	80023fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0310 	and.w	r3, r3, #16
 80023c0:	2b10      	cmp	r3, #16
 80023c2:	d11b      	bne.n	80023fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0210 	mvn.w	r2, #16
 80023cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2208      	movs	r2, #8
 80023d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f933 	bl	800264e <HAL_TIM_IC_CaptureCallback>
 80023e8:	e005      	b.n	80023f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f926 	bl	800263c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f935 	bl	8002660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b01      	cmp	r3, #1
 8002408:	d10e      	bne.n	8002428 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b01      	cmp	r3, #1
 8002416:	d107      	bne.n	8002428 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0201 	mvn.w	r2, #1
 8002420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7fe fc14 	bl	8000c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002432:	2b80      	cmp	r3, #128	; 0x80
 8002434:	d10e      	bne.n	8002454 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002440:	2b80      	cmp	r3, #128	; 0x80
 8002442:	d107      	bne.n	8002454 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800244c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fa67 	bl	8002922 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245e:	2b40      	cmp	r3, #64	; 0x40
 8002460:	d10e      	bne.n	8002480 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246c:	2b40      	cmp	r3, #64	; 0x40
 800246e:	d107      	bne.n	8002480 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f8f9 	bl	8002672 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	2b20      	cmp	r3, #32
 800248c:	d10e      	bne.n	80024ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 0320 	and.w	r3, r3, #32
 8002498:	2b20      	cmp	r3, #32
 800249a:	d107      	bne.n	80024ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0220 	mvn.w	r2, #32
 80024a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fa32 	bl	8002910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024ac:	bf00      	nop
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_TIM_ConfigClockSource+0x18>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e0b3      	b.n	8002634 <HAL_TIM_ConfigClockSource+0x180>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002504:	d03e      	beq.n	8002584 <HAL_TIM_ConfigClockSource+0xd0>
 8002506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800250a:	f200 8087 	bhi.w	800261c <HAL_TIM_ConfigClockSource+0x168>
 800250e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002512:	f000 8085 	beq.w	8002620 <HAL_TIM_ConfigClockSource+0x16c>
 8002516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251a:	d87f      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x168>
 800251c:	2b70      	cmp	r3, #112	; 0x70
 800251e:	d01a      	beq.n	8002556 <HAL_TIM_ConfigClockSource+0xa2>
 8002520:	2b70      	cmp	r3, #112	; 0x70
 8002522:	d87b      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x168>
 8002524:	2b60      	cmp	r3, #96	; 0x60
 8002526:	d050      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0x116>
 8002528:	2b60      	cmp	r3, #96	; 0x60
 800252a:	d877      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x168>
 800252c:	2b50      	cmp	r3, #80	; 0x50
 800252e:	d03c      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0xf6>
 8002530:	2b50      	cmp	r3, #80	; 0x50
 8002532:	d873      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x168>
 8002534:	2b40      	cmp	r3, #64	; 0x40
 8002536:	d058      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0x136>
 8002538:	2b40      	cmp	r3, #64	; 0x40
 800253a:	d86f      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x168>
 800253c:	2b30      	cmp	r3, #48	; 0x30
 800253e:	d064      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x156>
 8002540:	2b30      	cmp	r3, #48	; 0x30
 8002542:	d86b      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x168>
 8002544:	2b20      	cmp	r3, #32
 8002546:	d060      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x156>
 8002548:	2b20      	cmp	r3, #32
 800254a:	d867      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x168>
 800254c:	2b00      	cmp	r3, #0
 800254e:	d05c      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x156>
 8002550:	2b10      	cmp	r3, #16
 8002552:	d05a      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002554:	e062      	b.n	800261c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6899      	ldr	r1, [r3, #8]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f000 f95c 	bl	8002822 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002578:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	609a      	str	r2, [r3, #8]
      break;
 8002582:	e04e      	b.n	8002622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	6899      	ldr	r1, [r3, #8]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f000 f945 	bl	8002822 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025a6:	609a      	str	r2, [r3, #8]
      break;
 80025a8:	e03b      	b.n	8002622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6859      	ldr	r1, [r3, #4]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	461a      	mov	r2, r3
 80025b8:	f000 f8bc 	bl	8002734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2150      	movs	r1, #80	; 0x50
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 f913 	bl	80027ee <TIM_ITRx_SetConfig>
      break;
 80025c8:	e02b      	b.n	8002622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6859      	ldr	r1, [r3, #4]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	461a      	mov	r2, r3
 80025d8:	f000 f8da 	bl	8002790 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2160      	movs	r1, #96	; 0x60
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 f903 	bl	80027ee <TIM_ITRx_SetConfig>
      break;
 80025e8:	e01b      	b.n	8002622 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	461a      	mov	r2, r3
 80025f8:	f000 f89c 	bl	8002734 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2140      	movs	r1, #64	; 0x40
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f8f3 	bl	80027ee <TIM_ITRx_SetConfig>
      break;
 8002608:	e00b      	b.n	8002622 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4619      	mov	r1, r3
 8002614:	4610      	mov	r0, r2
 8002616:	f000 f8ea 	bl	80027ee <TIM_ITRx_SetConfig>
        break;
 800261a:	e002      	b.n	8002622 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800261c:	bf00      	nop
 800261e:	e000      	b.n	8002622 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002620:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr

0800264e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a25      	ldr	r2, [pc, #148]	; (800272c <TIM_Base_SetConfig+0xa8>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d007      	beq.n	80026ac <TIM_Base_SetConfig+0x28>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a2:	d003      	beq.n	80026ac <TIM_Base_SetConfig+0x28>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a22      	ldr	r2, [pc, #136]	; (8002730 <TIM_Base_SetConfig+0xac>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d108      	bne.n	80026be <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a1a      	ldr	r2, [pc, #104]	; (800272c <TIM_Base_SetConfig+0xa8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d007      	beq.n	80026d6 <TIM_Base_SetConfig+0x52>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026cc:	d003      	beq.n	80026d6 <TIM_Base_SetConfig+0x52>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a17      	ldr	r2, [pc, #92]	; (8002730 <TIM_Base_SetConfig+0xac>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d108      	bne.n	80026e8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a07      	ldr	r2, [pc, #28]	; (800272c <TIM_Base_SetConfig+0xa8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d103      	bne.n	800271c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	615a      	str	r2, [r3, #20]
}
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	40012c00 	.word	0x40012c00
 8002730:	40000400 	.word	0x40000400

08002734 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002734:	b480      	push	{r7}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	f023 0201 	bic.w	r2, r3, #1
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800275e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f023 030a 	bic.w	r3, r3, #10
 8002770:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4313      	orrs	r3, r2
 8002778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	621a      	str	r2, [r3, #32]
}
 8002786:	bf00      	nop
 8002788:	371c      	adds	r7, #28
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr

08002790 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	f023 0210 	bic.w	r2, r3, #16
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	031b      	lsls	r3, r3, #12
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	621a      	str	r2, [r3, #32]
}
 80027e4:	bf00      	nop
 80027e6:	371c      	adds	r7, #28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b085      	sub	sp, #20
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002804:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	f043 0307 	orr.w	r3, r3, #7
 8002810:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	609a      	str	r2, [r3, #8]
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002822:	b480      	push	{r7}
 8002824:	b087      	sub	sp, #28
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800283c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	021a      	lsls	r2, r3, #8
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	431a      	orrs	r2, r3
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	4313      	orrs	r3, r2
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	609a      	str	r2, [r3, #8]
}
 8002856:	bf00      	nop
 8002858:	371c      	adds	r7, #28
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002874:	2302      	movs	r3, #2
 8002876:	e041      	b.n	80028fc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a14      	ldr	r2, [pc, #80]	; (8002908 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d009      	beq.n	80028d0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c4:	d004      	beq.n	80028d0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a10      	ldr	r2, [pc, #64]	; (800290c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d10c      	bne.n	80028ea <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40012c00 	.word	0x40012c00
 800290c:	40000400 	.word	0x40000400

08002910 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <__libc_init_array>:
 8002934:	b570      	push	{r4, r5, r6, lr}
 8002936:	2600      	movs	r6, #0
 8002938:	4d0c      	ldr	r5, [pc, #48]	; (800296c <__libc_init_array+0x38>)
 800293a:	4c0d      	ldr	r4, [pc, #52]	; (8002970 <__libc_init_array+0x3c>)
 800293c:	1b64      	subs	r4, r4, r5
 800293e:	10a4      	asrs	r4, r4, #2
 8002940:	42a6      	cmp	r6, r4
 8002942:	d109      	bne.n	8002958 <__libc_init_array+0x24>
 8002944:	f000 f822 	bl	800298c <_init>
 8002948:	2600      	movs	r6, #0
 800294a:	4d0a      	ldr	r5, [pc, #40]	; (8002974 <__libc_init_array+0x40>)
 800294c:	4c0a      	ldr	r4, [pc, #40]	; (8002978 <__libc_init_array+0x44>)
 800294e:	1b64      	subs	r4, r4, r5
 8002950:	10a4      	asrs	r4, r4, #2
 8002952:	42a6      	cmp	r6, r4
 8002954:	d105      	bne.n	8002962 <__libc_init_array+0x2e>
 8002956:	bd70      	pop	{r4, r5, r6, pc}
 8002958:	f855 3b04 	ldr.w	r3, [r5], #4
 800295c:	4798      	blx	r3
 800295e:	3601      	adds	r6, #1
 8002960:	e7ee      	b.n	8002940 <__libc_init_array+0xc>
 8002962:	f855 3b04 	ldr.w	r3, [r5], #4
 8002966:	4798      	blx	r3
 8002968:	3601      	adds	r6, #1
 800296a:	e7f2      	b.n	8002952 <__libc_init_array+0x1e>
 800296c:	080029c4 	.word	0x080029c4
 8002970:	080029c4 	.word	0x080029c4
 8002974:	080029c4 	.word	0x080029c4
 8002978:	080029c8 	.word	0x080029c8

0800297c <memset>:
 800297c:	4603      	mov	r3, r0
 800297e:	4402      	add	r2, r0
 8002980:	4293      	cmp	r3, r2
 8002982:	d100      	bne.n	8002986 <memset+0xa>
 8002984:	4770      	bx	lr
 8002986:	f803 1b01 	strb.w	r1, [r3], #1
 800298a:	e7f9      	b.n	8002980 <memset+0x4>

0800298c <_init>:
 800298c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298e:	bf00      	nop
 8002990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002992:	bc08      	pop	{r3}
 8002994:	469e      	mov	lr, r3
 8002996:	4770      	bx	lr

08002998 <_fini>:
 8002998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299a:	bf00      	nop
 800299c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800299e:	bc08      	pop	{r3}
 80029a0:	469e      	mov	lr, r3
 80029a2:	4770      	bx	lr
